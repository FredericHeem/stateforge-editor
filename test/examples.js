var exampleMap = {
    "Acs.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n  <!-- General settings -->\n  <settings asynchronous=\"true\" library=\"qt\">\n    <description>Automatic Configuration Server</description>\n    <object instance=\"acs\" class=\"Acs\" include=\"Acs.h\"/>\n  </settings>\n  \n  <!-- events -->\n  <events>\n    <!-- Management Events -->\n    <eventSource name=\"ManagementEvent\">\n      <event id=\"EvOpen\"/>\n      <event id=\"EvClose\"/>\n    </eventSource>\n  </events>\n \n  <state name=\"Acs\">\n    <!-- State Close -->\n    <state name=\"Close\">\n    </state>\n    <state name=\"Open\">\n    </state>\n  </state>\n</sm:StateMachine>\n\n",
    "AcsClient.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <object instance=\"client\" class=\"AcsClient\" include=\"AcsClient.h\"/>\n        <object instance=\"clientPrivate\" class=\"AcsClientPrivate\" include=\"AcsClientPrivate.h\"/>        \n    </settings>\n\n    <!-- Events -->\n    <events>\n        <eventSource name=\"ManagementEvent\">\n            <event id=\"evStart\"/>\n            <event id=\"evStop\"/>\n        </eventSource>\n        <eventSource name=\"ConnectionRequestEvent\">\n            <event id=\"evConnectionRequestError\"/>\n            <event id=\"evConnectionRequestDone\"/>\n            <!--<event id=\"evConnectionRequestUnconnected\"/>\n            <event id=\"evConnectionRequestHostLookup\"/>\n            <event id=\"evConnectionRequestConnecting\"/>\n            <event id=\"evConnectionRequestSending\"/>\n            <event id=\"evConnectionRequestReading\"/>\n            <event id=\"evConnectionRequestConnected\"/>\n            <event id=\"evConnectionRequestClosing\"/>-->\n            <timer id=\"evTimerConnectionRequest\" name=\"TimerConnectionRequest\"/>\n        </eventSource>\n        <eventSource name=\"AcsConnectionEvent\">\n            <event id=\"evSocketError\"/>\n            <event id=\"evHttpPost\"/>\n            <event id=\"evInformRequest\"/>\n            <event id=\"evGetParameterNamesResponse\"/>\n            <event id=\"evSetParameterValuesResponse\"/>\n            <event id=\"evRebootResponse\"/>\n            <event id=\"evDownloadResponse\"/>\n            <event id=\"evTransferComplete\"/>\n            <event id=\"evFault\"/>\n            <event id=\"evSent\"/>\n            <event id=\"evUnknownRequest\"/>\n            <timer id=\"evTimerInformRequest\" name=\"TimerInformRequest\"/>\n            <timer id=\"evTimerHttpPost\" name=\"TimerHttpPost\"/>\n        </eventSource>\n        <eventSource name=\"Request\">\n            <event id=\"evRequestEnd\"/>\n        </eventSource>\n    </events>\n\n    <!-- State AcsClient -->\n    <state name=\"AcsClient\">\n        <transition event=\"evFault\" nextState=\"End\"/>\n        <transition event=\"evSocketError\" nextState=\"End\"/>\n        <transition event=\"evUnknownRequest\" nextState=\"End\"/>\n        <!-- State Initial -->\n        <state name=\"Initial\">\n            <transition event=\"evStart\" nextState=\"ConnectionRequest\"/>\n            <transition event=\"evInformRequest\" nextState=\"SendInformReponseAndWaitPost\"/>\n        </state>\n        <!-- State ConnectionRequest -->\n        <state name=\"ConnectionRequest\">\n            <onEntry>\n                <action>clientPrivate.connectionRequestSend()</action>\n                <timerStart timer=\"TimerConnectionRequest\" duration=\"client.conf().connectionRequestTimeout\"/>\n            </onEntry>\n            <onExit>\n                <action>clientPrivate.connectionRequestDestroy()</action>\n            </onExit>\n            <transition event=\"evConnectionRequestDone\" nextState=\"WaitInformRequest\"/>\n            <transition event=\"evConnectionRequestError\" nextState=\"End\"/>\n            <transition event=\"evTimerConnectionRequest\" nextState=\"End\">\n                <action>clientPrivate.m_errorMessage = \"Connection Request Timeout\"</action>\n            </transition>\n            <transition event=\"evInformRequest\" nextState=\"SendInformReponseAndWaitPost\"/>\n        </state>\n        <!-- State WaitInformRequest -->\n        <state name=\"WaitInformRequest\">\n            <onEntry>\n                <timerStart timer=\"TimerInformRequest\" duration=\"client.conf().informRequestTimeout\"/>\n            </onEntry>\n            <transition event=\"evTimerInformRequest\" nextState=\"End\">\n                <action>clientPrivate.m_errorMessage = \"Inform Request Timeout\"</action>\n            </transition>\n            <transition event=\"evInformRequest\" nextState=\"SendInformReponseAndWaitPost\"/>\n        </state>\n        <state name=\"SendInformReponseAndWaitPost\">\n            <onEntry>\n                <action>clientPrivate.sendInformResponse();</action>\n                <timerStart timer=\"TimerHttpPost\" duration=\"client.conf().httpPostTimeout\"/>\n            </onEntry>\n            <transition event=\"evTimerHttpPost\" nextState=\"End\">\n                <action>clientPrivate.m_errorMessage = \"Http Post Timeout\"</action>\n            </transition>\n            <transition event=\"evHttpPost\" nextState=\"SendRequestAndWaitResponse\">\n                <condition>clientPrivate.hasPendingRequest()</condition>\n            </transition>\n            <transition event=\"evHttpPost\" nextState=\"SendHttpOk\"/>\n        </state>\n        <state name=\"SendRequestAndWaitResponse\">\n            <onEntry>\n                <action>clientPrivate.sendRequest()</action>\n            </onEntry>\n            <transition event=\"evRequestEnd\" nextState=\"SendRequestAndWaitResponse\">\n                <condition>clientPrivate.hasPendingRequest()</condition>\n            </transition>\n            <transition event=\"evRequestEnd\" nextState=\"SendHttpOk\"/>\n            <transition event=\"evSocketError\"/>\n        </state>\n        <state name=\"SendHttpOk\">\n            <onEntry>\n                <action>clientPrivate.sendHttpResponse()</action>\n            </onEntry>\n            <transition event=\"evSocketError\" nextState=\"End\"/>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n</sm:StateMachine>\n\n",
    "AcsConnection.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <object instance=\"connection\" class=\"AcsConnection\" include=\"AcsConnection.h\"/>\n        <object instance=\"connectionPrivate\" class=\"AcsConnectionPrivate\" include=\"AcsConnectionPrivate.h\"/>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <eventSource name=\"ManagementEvent\">\n            <event id=\"evStop\"/>\n        </eventSource>\n        <eventSource name=\"QHttpRequest\">\n            <event id=\"evEndRequest\"/>\n        </eventSource>\n        <eventSource name=\"QHttpRequest\">\n            <event id=\"evDoneResponse\"/>\n        </eventSource>\n        <eventSource name=\"TimerEvent\">\n            <timer id=\"evMaxProcessingTimer\" name=\"MaxProcessingTimer\"/>\n            <timer id=\"evHttpResponseDelayTimer\" name=\"HttpResponseDelayTimer\"/>\n        </eventSource>\n        <!-- Acs client Events -->\n        <eventSource name=\"AcsClientEvent\">\n            <event id=\"evInformRequest\"/>\n            <event id=\"evGetParameterNamesResponse\"/>\n            <event id=\"evPost\"/>\n            <event id=\"evSent\"/>\n            <event id=\"evUnknownRequest\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"AcsConnection\">\n        <!-- State WaitInformRequest -->\n        <state name=\"WaitInformRequest\">\n            <transition event=\"evInformRequest\" nextState=\"WaitPost\">\n                <!--         <action>connection.sendInformResponse();</action> -->\n            </transition>\n        </state>\n        <state name=\"WaitPost\">\n            <transition event=\"evPost\" nextState=\"WaitPost\">\n                <!--         <action>connection.sendRequest();</action> -->\n            </transition>\n        </state>\n        <state name=\"WaitAck\">\n            <transition event=\"evSent\" nextState=\"End\"/>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n\n</sm:StateMachine>\n\n",
    "AcsRequestDownload.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n  <!-- General settings -->\n  <settings asynchronous=\"true\" library=\"qt\">\n    <object instance=\"request\" class=\"AcsRequestDownload\" include=\"AcsRequestDownload.h\"/>\n    <include>AcsConnection.h</include>\n  </settings>\n\n  <!-- events -->\n  <events>\n    <!-- Management Events -->\n    <eventSource name=\"ManagementEvent\">\n      <event id=\"evStart\">\n        <parameter type=\"AcsConnection\" name=\"connection\" passedBy=\"reference\"/>\n      </event>\n      <event id=\"evClose\"/>\n    </eventSource>\n    <!-- Sockets Events -->\n    <eventSource name=\"SocketEvent\">\n      <event id=\"evSocketError\"/>\n    </eventSource>\n    <!-- Acs client Events -->\n    <eventSource name=\"AcsClientEvent\">\n      <event id=\"evInformRequest\"/>\n      <event id=\"evTransferComplete\"/>\n      <event id=\"evDownloadResponse\"/>\n      <event id=\"evHttpPost\"/>\n      <event id=\"evSent\"/>\n      <event id=\"evUnknownRequest\"/>\n    </eventSource>\n  </events>\n\n  <state name=\"AcsRequestDownload\" >\n    <transition event=\"evSocketError\" nextState=\"End\"/>\n    <!-- State Initial -->\n    <state name=\"Initial\">\n      <transition event=\"evStart\" nextState=\"SendRequestAndWaitResponse\">\n        <action>connection.sendRequestDownload(request.getParam());</action>\n      </transition>\n    </state>\n    <state name=\"SendRequestAndWaitResponse\">\n      <transition event=\"evDownloadResponse\" nextState=\"WaitConnectionClose\">\n        <action>request.client().sendHttpResponse();</action>\n      </transition>\n    </state>\n    <state name=\"WaitConnectionClose\">\n      <transition event=\"evSocketError\" nextState=\"WaitInformRequest\"/>\n    </state>\n    <state name=\"WaitInformRequest\">\n      <transition event=\"evInformRequest\" nextState=\"WaitTranferComplete\">\n        <action>request.client().sendInformResponse();</action>\n      </transition>\n    </state>\n    <state name=\"WaitTranferComplete\">\n      <transition event=\"evTransferComplete\" nextState=\"WaitPost\">\n        <action>request.client().sendTransferCompleteResponse();</action>\n      </transition>\n    </state>\n    <state name=\"WaitPost\">\n      <transition event=\"evHttpPost\" nextState=\"End\">\n        <action>request.client().requestEnd();</action>\n      </transition>\n    </state>\n    <state name=\"End\" kind=\"final\"/>\n  </state>\n\n</sm:StateMachine>\n\n",
    "AcsRequestReboot.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- general settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <object instance=\"request\" class=\"AcsRequestRebootPrivate\" include=\"AcsRequestRebootPrivate.h\"/>\n        <include>AcsConnection.h</include>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <!-- Management Events -->\n        <eventSource name=\"ManagementEvent\">\n            <event id=\"evStart\">\n                <parameter type=\"AcsConnection\" name=\"connection\" passedBy=\"reference\"/>\n            </event>\n            <event id=\"evClose\"/>\n        </eventSource>\n        <!-- Sockets Events -->\n        <eventSource name=\"SocketEvent\">\n            <event id=\"evSocketError\"/>\n        </eventSource>\n        <!-- Acs client Events -->\n        <eventSource name=\"AcsClientEvent\">\n            <event id=\"evInformRequest\"/>\n            <event id=\"evRebootResponse\"/>\n            <event id=\"evHttpPost\"/>\n            <event id=\"evSent\"/>\n            <event id=\"evUnknownRequest\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"AcsRequestReboot\">\n        <transition event=\"evSocketError\" nextState=\"End\"/>\n        <!-- State Initial -->\n        <state name=\"Initial\">\n            <transition event=\"evStart\" nextState=\"SendRequestAndWaitResponse\">\n                <action>connection.sendRequestReboot();</action>\n            </transition>\n        </state>\n        <state name=\"SendRequestAndWaitResponse\">\n            <transition event=\"evRebootResponse\" nextState=\"WaitConnectionClose\">\n                <action>request.client().sendHttpResponse();</action>\n            </transition>\n        </state>\n        <state name=\"WaitConnectionClose\">\n            <transition event=\"evSocketError\" nextState=\"WaitInformRequest\"/>\n        </state>\n        <state name=\"WaitInformRequest\">\n            <transition event=\"evInformRequest\" nextState=\"WaitPost\">\n                <action>request.client().sendInformResponse();</action>\n            </transition>\n        </state>\n        <state name=\"WaitPost\">\n            <transition event=\"evHttpPost\" nextState=\"End\"/>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n</sm:StateMachine>\n\n",
    "Door.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- General settings -->\r\n  <settings asynchronous=\"true\" library=\"boost\">\r\n    <description>Door</description>\r\n    <object instance=\"door\" class=\"DoorPrivate\" include=\"DoorPrivate.h\"/>\r\n  </settings>\r\n  \r\n  <!-- Events -->\r\n  <events>\r\n    <eventSource name=\"RemoteControl\">\r\n      <event id=\"EvOpen\"/>\r\n      <event id=\"EvClose\"/>\r\n    </eventSource>\r\n    <eventSource name=\"Sensors\">\r\n      <event id=\"EvSensorOpened\"/>\r\n      <event id=\"EvSensorClosed\"/>\r\n    </eventSource>\r\n    <eventSource name=\"Management\">\r\n      <event id=\"EvQuit\"/>\r\n    </eventSource>\r\n  </events>\r\n\r\n  <state name=\"Door\">\r\n    <transition event=\"EvQuit\" nextState=\"End\"/>\r\n    <state name=\"Closed\">\r\n      <transition event=\"EvOpen\" action=\"door.engine.StartOpen()\" nextState=\"Opening\"/>\r\n    </state>\r\n    <state name=\"Opening\">\r\n      <transition event=\"EvSensorOpened\" action=\"door.engine.Stop()\" nextState=\"Opened\"/>\r\n    </state>\r\n    <state name=\"Opened\">\r\n      <transition event=\"EvClose\" action=\"door.engine.StartClose()\" nextState=\"Closing\"/>\r\n    </state>\r\n    <state name=\"Closing\">\r\n      <transition event=\"EvSensorClosed\" action=\"door.engine.Stop()\" nextState=\"Closed\"/>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\">\r\n    </state>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "DoorTester.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"boost\">\r\n        <description>DoorTester</description>\r\n        <object instance=\"doorTester\" class=\"DoorTester\" include=\"DoorTester.h\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"RemoteControl\">\r\n            <event id=\"EvOpen\"/>\r\n            <event id=\"EvClose\"/>\r\n        </eventSource>\r\n\r\n        <eventSource name=\"Management\">\r\n            <event id=\"EvStartTest\"/>\r\n            <event id=\"EvQuit\"/>\r\n        </eventSource>\r\n\r\n        <eventSource name=\"Timers\">\r\n            <timer id=\"evTimerOpen\" name=\"TimerOpen\" description=\"opening duration\"/>\r\n            <timer id=\"evTimerClose\" name=\"TimerClose\" description=\"closing duration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"DoorTester\">\r\n        <transition event=\"EvQuit\" nextState=\"End\"/>\r\n        <state name=\"Idle\">\r\n            <transition event=\"EvStartTest\" nextState=\"OpenAndWaitForOpened\"/>\r\n        </state>\r\n        <state name=\"OpenAndWaitForOpened\">\r\n            <onEntry>\r\n                <action>doorTester.GetDoor().EvOpen()</action>\r\n                <timerStart timer=\"TimerOpen\" duration=\"doorTester.GetOpenDuration()\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"TimerOpen\"/>\r\n            </onExit>\r\n            <transition event=\"evTimerOpen\" \r\n                        action=\"doorTester.GetDoor().EvSensorOpened()\"\r\n                        nextState=\"CloseAndWaitForClosed\"/>\r\n        </state>\r\n        <state name=\"CloseAndWaitForClosed\">\r\n            <onEntry>\r\n                <action>doorTester.GetDoor().EvClose()</action>\r\n                <timerStart timer=\"TimerClose\" duration=\"500\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"TimerClose\"/>\r\n            </onExit>\r\n            <transition event=\"evTimerClose\" nextState=\"End\">\r\n                <action>doorTester.GetDoor().EvSensorClosed()</action>\r\n                <action>doorTester.GetDoor().EvQuit()</action>\r\n            </transition>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\">\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "HelloWorld.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"boost\">\r\n        <description>HelloWorld</description>\r\n        <object instance=\"helloWorld\" class=\"HelloWorld\" include=\"HelloWorld.h\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"HelloWorldEvent\">\r\n            <event id=\"EvStart\"/>\r\n            <event id=\"EvStop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Timers\">\r\n            <timer id=\"EvTimerRetry\" name=\"TimerRetry\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"HelloWorld\">\r\n\r\n        <!-- transitions -->\r\n        <transition event=\"EvStop\" nextState=\"End\"/>\r\n        <!-- Children state -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"EvStart\" nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerRetry\" duration=\"1000\"/>\r\n                <action>helloWorld.Print(\"Ciao\")</action>\r\n            </onEntry>\r\n            <transition event=\"EvTimerRetry\" condition=\"helloWorld.HasReachedLimit()\" nextState=\"End\">\r\n                <action>helloWorld.Print(\"Bye\")</action>\r\n            </transition>\r\n            <transition event=\"EvTimerRetry\" nextState=\"Running\">\r\n                <action>helloWorld.IncrementCounter();</action>\r\n            </transition>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Led.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n<!-- general settings -->\r\n    <settings asynchronous=\"false\" library=\"std\">\r\n        <object instance=\"ledPrivate\" class=\"LedPrivate\" include=\"LedPrivate.h\"/>\r\n    </settings>\r\n    \r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"SwitchEvent\">\r\n            <event id=\"On\"/>\r\n            <event id=\"Off\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- states -->\r\n    <state name=\"Led\">\r\n        <state name=\"SwitchedOff\">\r\n            <onEntry action=\"ledPrivate.DoOff()\"/>\r\n            <transition event=\"On\" nextState=\"SwitchedOn\"/>\r\n        </state>\r\n        <state name=\"SwitchedOn\">\r\n            <onEntry action=\"ledPrivate.DoOn()\"/>\r\n            <transition event=\"Off\" nextState=\"SwitchedOff\"/>\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Light.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- general settings -->\r\n  <settings asynchronous=\"false\" library=\"std\">\r\n    <object instance=\"light\" class=\"LightPrivate\" include=\"LightPrivate.h\"/>\r\n  </settings>\r\n  <!-- events -->\r\n  <events>\r\n    <eventSource name=\"SwitchEvent\">\r\n      <event id=\"evOn\"/>\r\n      <event id=\"evOff\"/>\r\n    </eventSource>\r\n  </events>\r\n\r\n  <!-- States -->\r\n  <state name=\"Light\">\r\n    <state name=\"Off\">\r\n      <onEntry action=\"light.doOff();\"/>\r\n      <transition event=\"evOn\" nextState=\"On\"/>\r\n    </state>\r\n    <state name=\"On\">\r\n      <onEntry action=\"light.doOn();\"/>\r\n      <transition event=\"evOff\" nextState=\"Off\"/>\r\n    </state>\r\n  </state>\r\n</sm:StateMachine>\r\n",
    "LoginMvc.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- General settings -->\r\n  <settings asynchronous=\"true\" library=\"qt\">\r\n    <description>Login Model View Controller</description>\r\n    <object instance=\"loginMvc\" class=\"LoginMvc\" include=\"LoginMvc.h\"/>\r\n    <object instance=\"view\" class=\"MyView\" include=\"LoginMvc.h\"/>\r\n  </settings>\r\n\r\n  <!-- Events -->\r\n  <events>\r\n    <eventSource name=\"Management\">\r\n      <event id=\"evStart\"/>\r\n      <event id=\"evStop\"/>\r\n    </eventSource>\r\n    <eventSource name=\"View\">\r\n      <event id=\"evIntentLogin\"/>\r\n      <event id=\"evCancelLogin\"/>\r\n      <event id=\"evIntentContinue\"/>\r\n      <event id=\"evIntentLogout\"/>\r\n    </eventSource>\r\n    <eventSource name=\"Model\">\r\n      <event id=\"evLoginComplete\">\r\n        <parameter name=\"success\" type=\"bool\"/>\r\n      </event>\r\n    </eventSource>\r\n    <eventSource name=\"Timers\">\r\n      <timer id=\"evTimerLogin\" name=\"TimerLogin\"/>\r\n    </eventSource>    \r\n  </events>\r\n\r\n  <!-- States -->\r\n  <state name=\"LoginMvc\">\r\n    <!-- transition valid for all substate -->\r\n    <transition event=\"evStop\" nextState=\"End\"/>\r\n    <!-- Initial -->\r\n    <state name=\"Initial\">\r\n      <transition event=\"evStart\" action=\"view.notifyWelcome();\" nextState=\"Idle\"/>\r\n    </state>\r\n    <!-- Idle -->\r\n    <state name=\"Idle\">\r\n      <!-- Idle onEntry -->\r\n      <onEntry>\r\n        <action>view.loginButton->setEnabled(true);</action>\r\n        <action>view.logoutButton->setEnabled(false);</action>\r\n        <action>view.cancelButton->setEnabled(false);</action>\r\n      </onEntry>\r\n      <!-- Idle transition -->\r\n      <transition event=\"evIntentLogin\" nextState=\"TryingToLogin\"/>\r\n    </state>\r\n    <!-- TryingToLogin -->\r\n    <state name=\"TryingToLogin\">\r\n      <!-- TryingToLogin onEntry -->\r\n      <onEntry>\r\n        <action>view.loginButton->setEnabled(false);</action>\r\n        <action>view.logoutButton->setEnabled(false);</action>\r\n        <action>view.cancelButton->setEnabled(true);</action>\r\n        <action>loginMvc.login();</action>\r\n        <timerStart timer=\"TimerLogin\" duration=\"loginMvc.getLoginTimeout()\"/>\r\n      </onEntry>\r\n      <!-- TryingToLogin onExit -->\r\n      <onExit>\r\n        <timerStop timer=\"TimerLogin\"/>\r\n      </onExit>\r\n      <!-- TryingToLogin transitions -->\r\n      <!-- transition triggered the push button Ok -->\r\n      <transition event=\"evCancelLogin\" nextState=\"LoginCancelled\" />\r\n\r\n      <!-- transition triggered on timer event-->\r\n      <transition event=\"evTimerLogin\" nextState=\"LoginTimeout\"/>\r\n      <!-- transition triggered but the model-->\r\n      <transition event=\"evLoginComplete\" condition=\"success == true\" nextState=\"LoggedIn\"/>\r\n      <transition event=\"evLoginComplete\" nextState=\"LoginError\"/>\r\n    </state>\r\n    <!-- LoggedIn -->\r\n    <state name=\"LoggedIn\">\r\n      <onEntry action=\"view.notifyLogin();\"/>\r\n      <transition event=\"evIntentContinue\" nextState=\"Active\"/>\r\n    </state>    \r\n    <!-- Active -->\r\n    <state name=\"Active\">\r\n      <onEntry>\r\n        <action>view.loginButton->setEnabled(false);</action>\r\n        <action>view.logoutButton->setEnabled(true);</action>\r\n        <action>view.cancelButton->setEnabled(false);</action>\r\n      </onEntry>\r\n      <transition event=\"evIntentLogout\" nextState=\"Idle\"/>\r\n    </state>\r\n\r\n    <state name=\"TopError\">\r\n      <transition event=\"evIntentContinue\" nextState=\"Idle\"/>\r\n      <!-- LoginCancelled -->\r\n      <state name=\"LoginCancelled\">\r\n        <onEntry action=\"view.notifyCancel();\"/>\r\n      </state>\r\n      <!-- LoginTimeout -->\r\n      <state name=\"LoginTimeout\">\r\n        <onEntry action=\"view.notifyTimeout();\"/>\r\n      </state>\r\n      <!-- LoginError -->\r\n      <state name=\"LoginError\">\r\n        <onEntry action=\"view.notifyError();\"/>\r\n      </state>\r\n    </state>\r\n    <!-- End -->\r\n    <state name=\"End\" kind=\"final\">\r\n    </state>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Microwave.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- General settings -->\r\n  <settings asynchronous=\"false\" library=\"std\">\r\n    <description>Microwave</description>\r\n    <object instance=\"microwave\" class=\"Microwave\" include=\"Microwave.h\"/>\r\n  </settings>\r\n  \r\n  <!-- Events -->\r\n  <events>\r\n    <eventSource name=\"Microwave\">\r\n      <event id=\"evStart\"/>\r\n      <event id=\"evStop\"/>\r\n      <event id=\"evTurnOn\"/>\r\n      <event id=\"evTurnOff\"/>\r\n    </eventSource>\r\n    <eventSource name=\"CookingAnalyzer\">\r\n      <event id=\"evCookingDone\"/>\r\n    </eventSource>\r\n    <eventSource name=\"Door\">\r\n      <event id=\"evDoorOpened\"/>\r\n      <event id=\"evDoorClosed\"/>\r\n    </eventSource>\r\n  </events>\r\n\r\n  <!-- States -->\r\n  <state name=\"Microwave\">\r\n    <transition event=\"evStop\" nextState=\"End\"/>\r\n    <state name=\"Initial\">\r\n      <transition event=\"evStart\" nextState=\"Operating\"/>\r\n    </state>\r\n    <state name=\"Operating\">\r\n      <parallel nextState=\"End\">\r\n        <!-- First region is the engine -->\r\n        <state name=\"Engine\">\r\n          <state name=\"Off\">\r\n            <transition event=\"evTurnOn\"\r\n                        condition=\"&amp;context.GetParentContext().GetParallelOperating().GetContextDoor().GetState() == &amp;MicrowaveDoorOpenState::GetInstance()\"\r\n                        nextState=\"Idle\"/>\r\n            <transition event=\"evTurnOn\" nextState=\"Cooking\"/>\r\n          </state>\r\n          <state name=\"On\">\r\n            <transition event=\"evTurnOff\" nextState=\"Off\"/>\r\n            <transition event=\"evCookingDone\" nextState=\"Off\"/>\r\n            <state name=\"Idle\">\r\n              <transition event=\"evDoorClosed\" nextState=\"Cooking\"/>\r\n            </state>\r\n            <state name=\"Cooking\">\r\n              <transition event=\"evDoorOpened\" nextState=\"Idle\"/>\r\n            </state>\r\n          </state>\r\n        </state>\r\n        <!-- Second region is the door -->\r\n        <state name=\"Door\">\r\n          <state name=\"DoorClose\">\r\n            <transition event=\"evDoorOpened\" nextState=\"DoorOpen\"/>\r\n          </state>\r\n          <state name=\"DoorOpen\">\r\n            <transition event=\"evDoorClosed\" nextState=\"DoorClose\"/>\r\n          </state>\r\n        </state>\r\n      </parallel>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\"/>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Microwave02.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n    \r\n  <!-- general settings -->\r\n  <settings asynchronous=\"false\" library=\"boost\">\r\n    <description>Microwave</description>\r\n    <object instance=\"microwave\" class=\"Microwave\" include=\"Microwave.h\"/>\r\n    <context class=\"MicrowaveContext\"/>\r\n  </settings>\r\n  <!-- events -->\r\n  <events>\r\n    <eventSource name=\"Microwave\">\r\n      <event id=\"evStart\"/>\r\n      <event id=\"evStop\"/>\r\n      <event id=\"evTurnOn\"/>\r\n      <event id=\"evTurnOff\"/>\r\n    </eventSource>\r\n    <eventSource name=\"CookingAnalyzer\">\r\n      <event id=\"evCookingDone\"/>\r\n    </eventSource>\r\n\r\n    <eventSource name=\"Door\">\r\n      <event id=\"evDoorOpened\"/>\r\n      <event id=\"evDoorClosed\"/>\r\n    </eventSource>    \r\n  </events>\r\n  \r\n  <!-- States -->\r\n  <state name=\"Microwave\">\r\n    <transition event=\"evStop\" nextState=\"End\"/>\r\n    <state name=\"Initial\">\r\n      <transition event=\"evStart\" nextState=\"Operating\"/>\r\n    </state>\r\n    <state name=\"Operating\">\r\n      <parallel nextState=\"End\">\r\n        <!-- First region is the engine -->\r\n        <state name=\"Engine\">\r\n          <state name=\"Off\">\r\n            <transition event=\"evTurnOn\"\r\n                        condition=\"&amp;context.GetParentContext().GetParallelOperating().GetContextDoor().GetState() == &amp;Microwave02DoorOpenState::GetInstance()\" \r\n                        nextState=\"Idle\"/>\r\n            <transition event=\"evTurnOn\" nextState=\"Cooking\"/>\r\n          </state>\r\n          <state name=\"On\">\r\n            <transition event=\"evTurnOff\" nextState=\"Off\"/>\r\n            <transition event=\"evCookingDone\" nextState=\"Off\"/>\r\n            <state name=\"Idle\">\r\n              <transition event=\"evDoorClosed\" nextState=\"Cooking\"/>\r\n            </state>\r\n            <state name=\"Cooking\">\r\n              <transition event=\"evDoorOpened\" nextState=\"Idle\"/>\r\n            </state>\r\n          </state>\r\n        </state>\r\n        <!-- Second region is the door -->\r\n        <state name=\"Door\">\r\n          <state name=\"DoorClose\">\r\n            <transition event=\"evDoorOpened\" nextState=\"DoorOpen\"/>\r\n          </state>\r\n          <state name=\"DoorOpen\">\r\n            <transition event=\"evDoorClosed\" nextState=\"DoorClose\"/>\r\n          </state>\r\n        </state>\r\n      </parallel>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\"/>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Ping.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"qt\">\r\n        <object instance=\"ping\" class=\"Ping\" include=\"Ping.h\"/>\r\n    </settings>\r\n    \r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Ping\">\r\n            <event id=\"EvStart\"/>\r\n            <event id=\"EvCancel\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Internal\">\r\n            <event id=\"EvError\"/>\r\n            <event id=\"EvPingReply\"/>\r\n            <timer id=\"EvTimer\" name=\"Timer\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Ping\">\r\n        <state name=\"Idle\">\r\n            <transition event=\"EvStart\" nextState=\"SendPingAndWaitForReply\"/>\r\n        </state>\r\n        <state name=\"SendPingAndWaitForReply\">\r\n            <onEntry>\r\n                <action>ping.send()</action>\r\n                <timerStart timer=\"Timer\" duration=\"ping.getTimeout()\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"Timer\"/>\r\n            </onExit>\r\n            <transition event=\"EvCancel\" nextState=\"End\"/>\r\n            <transition event=\"EvPingReply\" condition=\"ping.getTx() == ping.getCount()\" nextState=\"End\"/>\r\n            <transition event=\"EvTimer\" condition=\"ping.getTx() == ping.getCount()\" nextState=\"End\"/>\r\n            <transition event=\"EvTimer\" nextState=\"SendPingAndWaitForReply\" />\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Robot.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"qt\">\r\n        <description>Demonstrate the parallel feature using a robot witha camera and arm</description>\r\n        <object instance=\"camera\" class=\"Camera\" include=\"Camera.h\"/>\r\n        <object instance=\"arm\" class=\"Arm\" include=\"Arm.h\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"ManagementEvent\">\r\n            <event id=\"evCalibrateRequest\"/>\r\n            <event id=\"evStop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"CameraCalibrationEvent\">\r\n            <event id=\"evCameraCalibrationDone\"/>\r\n            <event id=\"evCameraCalibrationError\"/>\r\n        </eventSource>\r\n        <eventSource name=\"ArmCalibrationEvent\">\r\n            <event id=\"evArmCalibrationDone\"/>\r\n            <event id=\"evArmCalibrationError\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Robot\">\r\n        <transition event=\"evStop\" nextState=\"End\"/>\r\n        <!-- Idle state -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"evCalibrateRequest\" nextState=\"Calibrating\"/>\r\n        </state>\r\n        <state name=\"Calibrating\">\r\n            <parallel nextState=\"Operational\">\r\n                <!-- State Camera -->\r\n                <state name=\"Camera\">\r\n                    <!-- State CameraCalibrating -->\r\n                    <state name=\"CameraCalibrating\" description=\"Calibrate the camera\">\r\n                        <onEntry action=\"camera.calibrateRequest()\"/>\r\n                        <transition event=\"evCameraCalibrationDone\" nextState=\"CameraCalibrationEnd\"/>\r\n                        <transition event=\"evCameraCalibrationError\" nextState=\"End\"/>\r\n                    </state>\r\n                    <!-- State CameraCalibrationEnd -->\r\n                    <state name=\"CameraCalibrationEnd\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- State Arm -->\r\n                <state name=\"Arm\">\r\n                    <!-- State ArmCalibrating -->\r\n                    <state name=\"ArmCalibrating\" description=\"Calibrate the arm\">\r\n                        <onEntry action=\"arm.calibrateRequest()\"/>\r\n                        <transition event=\"evArmCalibrationDone\" nextState=\"ArmCalibrationEnd\"/>\r\n                        <transition event=\"evArmCalibrationError\" nextState=\"End\"/>\r\n                    </state>\r\n                    <!-- State ArmCalibrationEnd -->\r\n                    <state name=\"ArmCalibrationEnd\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <state name=\"Operational\">\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Samek.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- general settings -->\r\n  <settings asynchronous=\"false\" library=\"std\">\r\n    <description>Samek fsm example</description>\r\n    <object instance=\"samek\" class=\"Samek\" include=\"Samek.h\"/>\r\n  </settings>\r\n  \r\n  <!-- events -->\r\n  <events>\r\n    <eventSource name=\"HelloWorldEvent\">\r\n      <event id=\"a\"/>\r\n      <event id=\"b\"/>\r\n      <event id=\"c\"/>\r\n      <event id=\"d\"/>\r\n      <event id=\"e\"/>\r\n      <event id=\"f\"/>\r\n      <event id=\"g\"/>\r\n      <event id=\"h\"/>\r\n    </eventSource>\r\n  </events>\r\n\r\n  <!-- States -->\r\n  <state name=\"Samek\">\r\n    <transition event=\"e\" nextState=\"S211\"/>\r\n    <state name=\"S1\">\r\n      <transition event=\"a\" nextState=\"S12\"/>\r\n      <transition event=\"c\"/>\r\n      <transition event=\"d\" nextState=\"S0\"/>\r\n      <transition event=\"f\" nextState=\"S211\"/>\r\n      <transition event=\"g\" nextState=\"S21\"/>\r\n      <state name=\"S11\">\r\n      </state>\r\n      <state name=\"S12\">\r\n      </state>\r\n    </state>\r\n    <state name=\"S2\">\r\n      <transition event=\"c\" nextState=\"S1\"/>\r\n      <transition event=\"f\" nextState=\"S11\"/>\r\n      <state name=\"S21\">\r\n        <transition event=\"b\" nextState=\"S211\"/>\r\n        <transition event=\"h\" condition=\"samek.foo == 0\" action=\"samek.foo = 1;\"/>\r\n        <state name=\"S211\">\r\n          <transition event=\"d\" nextState=\"S21\"/>\r\n          <transition event=\"g\" nextState=\"S0\"/>\r\n          <transition event=\"h\" condition=\"samek.foo == 0\" action=\"samek.foo = 0;\"/>\r\n        </state>\r\n      </state>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\">\r\n    </state>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Tr69Client.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <description>TR069 client</description>\n        <object instance=\"client\" class=\"Tr69Client\" include=\"Tr69Client.h\"/>\n        <object instance=\"clientPrivate\" class=\"Tr69ClientPrivate\" include=\"Tr69ClientPrivate.h\"/>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <!-- HttpEvent Events -->\n        <eventSource name=\"ConnectionRequestServerEvent\">\n            <event id=\"evConnectionRequestNew\"/>\n        </eventSource>\n        <eventSource name=\"TimerEvent\">\n            <timer id=\"evHttpResponseDelayTimer\" name=\"HttpResponseDelayTimer\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"Tr69Client\">\n        <!-- State Close -->\n        <state name=\"WaitNewConnectionRequest\">\n            \n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n</sm:StateMachine>\n\n",
    "Tr69Connection.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <object instance=\"connection\" class=\"Tr69Connection\" include=\"Tr69Connection.h\"/>\n        <object instance=\"connectionPrivate\" class=\"Tr69ConnectionPrivate\" include=\"Tr69ConnectionPrivate.h\"/>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <!-- Management Events -->\n        <eventSource name=\"ManagementEvent\">\n            <event id=\"EvClose\"/>\n        </eventSource>\n        <!-- Acs client Events -->\n        <eventSource name=\"InternalEvent\">\n            <event id=\"evSendInformRequest\"/>\n        </eventSource>\n        <eventSource name=\"ParserEvent\">\n            <event id=\"evInformResponse\"/>\n            <event id=\"evParserError\"/>\n        </eventSource>\n        <eventSource name=\"SocketEvent\">\n            <event id=\"evSocketError\"/>\n            <event id=\"evSocketDisconnected\"/>\n            <event id=\"evSocketConnected\"/>\n        </eventSource>\n        <eventSource name=\"TimerEvent\">\n            <timer id=\"evRequestTimer\" name=\"RequestTimer\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"Tr69Connection\">\n        <transition event=\"evParserError\" nextState=\"End\"/>\n        <transition event=\"evSocketError\" nextState=\"End\"/>\n        <transition event=\"evSocketDisconnected\" nextState=\"End\"/>\n        <!-- State Idle -->\n        \n        <state name=\"Idle\">\n            <transition event=\"evSendInformRequest\" nextState=\"Connecting\"/>\n        </state>\n        <state name=\"Connecting\">\n            <onEntry action=\"connectionPrivate.doConnect()\"/>\n            <transition event=\"evSocketConnected\" nextState=\"SendInformRequestAndWaitForResponse\"/>\n        </state>\n        <state name=\"SendInformRequestAndWaitForResponse\">\n            <onEntry action=\"connectionPrivate.doSendInformRequest()\">\n                <timerStart timer=\"RequestTimer\" duration=\"connection.conf().requestTimeout\"/>\n            </onEntry>\n            <onExit>\n                <action>connectionPrivate.emitFinished()</action>\n            </onExit>\n            <transition event=\"evRequestTimer\" nextState=\"Idle\">\n                <action>connectionPrivate.m_errorMessage = \"Timeout waiting for Inform Response\"</action>\n            </transition>\n            <transition event=\"evInformResponse\" nextState=\"SendPost\"/>\n        </state>\n        <state name=\"SendPost\">\n            <onEntry action=\"connectionPrivate.doSendPost()\">\n            </onEntry>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n\n</sm:StateMachine>\n\n",
    "Tr69ConnectionRequestResponder.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <description>Respond to incoming connection request from Acs server</description>\n        <object instance=\"responder\" class=\"Tr69ConnectionRequestResponder\" include=\"Tr69ConnectionRequestResponder.h\"/>\n        <object instance=\"responderPrivate\" class=\"Tr69ConnectionRequestResponderPrivate\" include=\"Tr69ConnectionRequestResponderPrivate.h\"/>\n        <object instance=\"request\" class=\"QHttpRequest\" include=\"qhttprequest.h\"/>\n        <object instance=\"response\" class=\"QHttpResponse\" include=\"qhttpresponse.h\"/>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <eventSource name=\"ManagementEvent\">\n            <event id=\"evStop\"/>\n        </eventSource>\n        <eventSource name=\"QHttpRequest\">\n            <event id=\"evEndRequest\"/>\n        </eventSource>\n        <eventSource name=\"QHttpRequest\">\n            <event id=\"evDoneResponse\"/>\n        </eventSource>\n        <eventSource name=\"TimerEvent\">\n            <timer id=\"evMaxProcessingTimer\" name=\"MaxProcessingTimer\"/>\n            <timer id=\"evHttpResponseDelayTimer\" name=\"HttpResponseDelayTimer\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"Tr69ConnectionRequestResponder\">\n        <onEntry>\n            <timerStart timer=\"MaxProcessingTimer\" duration=\"responder.conf().maxProcessingDuration\"/>\n        </onEntry>\n        <transition event=\"evMaxProcessingTimer\" nextState=\"End\">\n            <action>responderPrivate.m_errorMessage = \"Processing Timeout\"</action>\n        </transition>\n        <transition event=\"evStop\" nextState=\"End\">\n            <action>responderPrivate.m_errorMessage = \"Responder stoppped\"</action>\n        </transition>\n        <!-- State Close -->\n        <state name=\"WaitEndRequest\">\n            <transition event=\"evEndRequest\" nextState=\"WaitToSendResponse\"/>\n        </state>\n        <state name=\"WaitToSendResponse\">\n            <onEntry>\n                <timerStart timer=\"HttpResponseDelayTimer\" duration=\"responder.conf().httpResponseDelay\"/>\n            </onEntry>\n            <transition event=\"evHttpResponseDelayTimer\" nextState=\"SendResponseAndWaitDone\"/>\n        </state>\n        <state name=\"SendResponseAndWaitDone\">\n            <onEntry>\n                <action>response.writeHead(200)</action>\n                <action>response.end()</action>\n            </onEntry>\n            <transition event=\"evDoneResponse\" nextState=\"End\"/>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n</sm:StateMachine>\n\n",
    "Tr69ConnectionRequestServer.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\n    <!-- General settings -->\n    <settings asynchronous=\"true\" library=\"qt\">\n        <object instance=\"server\" class=\"Tr69ConnectionRequestServer\" include=\"Tr69ConnectionRequestServer.h\"/>\n        <object instance=\"serverPrivate\" class=\"Tr69ConnectionRequestServerPrivate\" include=\"Tr69ConnectionRequestServerPrivate.h\"/>\n    </settings>\n\n    <!-- events -->\n    <events>\n        <eventSource name=\"HttpEvent\">\n            <event id=\"evConnectionRequestNew\"/>\n            <event id=\"evHttpGet\"/>\n        </eventSource>\n        <eventSource name=\"SocketEvent\">\n            <event id=\"evSocketDisconnected\"/>\n            <event id=\"evSocketError\"/>\n        </eventSource>\n        <eventSource name=\"TimerEvent\">\n            <timer id=\"evProcessingTimer\" name=\"ProcessingTimer\"/>\n            <timer id=\"evHttpResponseDelayTimer\" name=\"HttpResponseDelayTimer\"/>\n            <timer id=\"evInformRequestDelayTimer\" name=\"InformRequestDelayTimer\"/>\n        </eventSource>\n    </events>\n\n    <state name=\"Tr69ConnectionRequestServer\">\n        <!-- State Close -->\n        <state name=\"WaitForIncommingConnection\">\n            <transition event=\"evConnectionRequestNew\" nextState=\"Processing\"/>\n        </state>\n        <state name=\"Processing\">\n            <!--<onEntry>\n                <timerStart timer=\"ProcessingTimer\" duration=\"server.conf().processingMaxDuration\"/>\n            </onEntry>\n            <onExit action=\"serverPrivate.connectionDestroy()\"/>\n            <transition event=\"evProcessingTimer\" nextState=\"WaitForIncommingConnection\"/>\n            <transition event=\"evSocketError\" nextState=\"WaitForIncommingConnection\"/>\n            <state name=\"WaitForHttpGet\">\n                <transition event=\"evHttpGet\" nextState=\"WaitToSendHttpResponse\"/>\n            </state>\n            <state name=\"WaitToSendHttpResponse\">\n                <onEntry>\n                    <timerStart timer=\"HttpResponseDelayTimer\" duration=\"server.conf().httpResponseDelay\"/>\n                </onEntry>\n                <transition event=\"evHttpResponseDelayTimer\" nextState=\"WaitDisconnection\">\n                    <action>serverPrivate.sendHttpResponse(200,\"OK\")</action>\n                    <action>serverPrivate.connectionClose()</action>\n                    <action>serverPrivate.emitReadyToSendInformRequest()</action>\n                </transition>\n            </state>\n            <state name=\"WaitDisconnection\">\n                <transition event=\"evSocketDisconnected\" nextState=\"WaitForIncommingConnection\">\n                </transition>\n            </state>-->\n        </state>\n    </state>\n</sm:StateMachine>\n\n",
    "TrafficLight.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"qt\">\r\n        <object instance=\"light\" class=\"Light\" include=\"Light.h\"/>\r\n    </settings>\r\n    \r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"TimerEvents\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"MaxDuration\"/>\r\n            <timer id=\"EvTimerRed\" name=\"TimerRed\"/>\r\n            <timer id=\"EvTimerYellow\" name=\"TimerYellow\"/>\r\n            <timer id=\"EvTimerGreen\" name=\"TimerGreen\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"TrafficLight\">\r\n        <onEntry>\r\n            <timerStart timer=\"MaxDuration\" duration=\"light.getMaxDuration()\"/>\r\n        </onEntry>\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\"/>\r\n        <state name=\"Red\">\r\n            <onEntry>\r\n                <action>light.TurnOnRed()</action>\r\n                <timerStart timer=\"TimerRed\" duration=\"light.getRedDuration()\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <action>light.TurnOffRed()</action>\r\n                <timerStop timer=\"TimerRed\"/>\r\n            </onExit>\r\n            <transition event=\"EvTimerRed\" nextState=\"Green\"/>\r\n        </state>\r\n        <state name=\"Yellow\">\r\n            <onEntry action=\"light.TurnOnYellow()\">\r\n                <timerStart timer=\"TimerYellow\" duration=\"light.getYellowDuration()\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.TurnOffYellow()\"/>\r\n            <transition event=\"EvTimerYellow\" nextState=\"Red\"/>\r\n        </state>\r\n        <state name=\"Green\">\r\n            <onEntry action=\"light.TurnOnGreen()\">\r\n                <timerStart timer=\"TimerGreen\" duration=\"light.getGreenDuration()\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.TurnOffGreen()\"/>\r\n            <transition event=\"EvTimerGreen\" nextState=\"Yellow\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "UrlGet.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" library=\"qt\">\r\n        <description>get a web page from http and a file from ftp by using the parallel feature</description>\r\n        <object instance=\"urlGet\" class=\"UrlGet\" include=\"UrlGet.h\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"ManagementEvent\">\r\n            <event id=\"evStart\"/>\r\n            <event id=\"evStop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"HttpEvent\">\r\n            <event id=\"evHttpDone\"/>\r\n            <event id=\"evHttpDoneError\"/>\r\n        </eventSource>\r\n        <eventSource name=\"FtpEvent\">\r\n            <event id=\"evFtpDone\"/>\r\n            <event id=\"evFtpDoneError\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Timers\">\r\n            <timer id=\"evTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"UrlGet\">\r\n        <!-- default transitions -->\r\n        <transition event=\"evTimerMaxDuration\" nextState=\"End\" description=\"time out error\">\r\n            <action>//TODO</action>\r\n        </transition>\r\n        <!-- Idle state -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"evStart\" nextState=\"Running\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"30000\"/>\r\n            </transition>\r\n        </state>\r\n        <state name=\"Running\">\r\n            <parallel nextState=\"End\">\r\n                <!-- State Http -->\r\n                <state name=\"Http\">\r\n                    <!-- State HttpGet -->\r\n                    <state name=\"HttpGet\" description=\"fetch a web page\">\r\n                        <onEntry action=\"urlGet.httpStart()\"/>\r\n                        <transition event=\"evHttpDone\" nextState=\"HttpEnd\" description=\"http done\"/>\r\n                        <transition event=\"evHttpDoneError\" nextState=\"End\" description=\"http error\"/>\r\n                    </state>\r\n                    <!-- State HttpEnd -->\r\n                    <state name=\"HttpEnd\" kind=\"final\"/>\r\n                </state>\r\n                <!-- State Http -->\r\n\r\n                <!-- State Ftp -->\r\n                <state name=\"Ftp\">\r\n                    <!-- State FtpGet -->\r\n                    <state name=\"FtpGet\" description=\"get a file from Ftp\">\r\n                        <onEntry action=\"urlGet.ftpStart()\"/>\r\n                        <transition event=\"evFtpDone\" nextState=\"FtpEnd\" description=\"ftp done\"/>\r\n                        <transition event=\"evFtpDoneError\" nextState=\"End\" description=\"ftp error\"/>\r\n                    </state>\r\n                    <!-- State FtpEnd -->\r\n                    <state name=\"FtpEnd\" kind=\"final\"/>\r\n                </state>\r\n                <!-- State Ftp -->\r\n            </parallel>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "WashingMachine.fsmcpp": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineCpp-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineCpp-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd\" >\r\n\r\n  <!-- General settings -->\r\n  <settings asynchronous=\"false\" library=\"std\">\r\n    <description>WashingMachine</description>\r\n    <object instance=\"washingMachine\" class=\"WashingMachine\" include=\"WashingMachine.h\"/>\r\n    <context instance=\"ctxt\"/>\r\n  </settings>\r\n  \r\n  <!-- events -->\r\n  <events>\r\n    <eventSource name=\"WashingMachine\">\r\n      <event id=\"Start\"/>\r\n      <event id=\"Stop\"/>\r\n      <event id=\"Fault\"/>\r\n      <event id=\"DiagnoseSuccess\"/>\r\n      <event id=\"WashingDone\"/>\r\n      <event id=\"RinsingDone\"/>\r\n      <event id=\"SpinningDone\"/>\r\n    </eventSource>\r\n  </events>\r\n  <!-- First machine -->\r\n  <state name=\"WashingMachine\">\r\n    <transition event=\"Stop\" nextState=\"End\"/>\r\n    <state name=\"Idle\">\r\n      <transition event=\"Start\" nextState=\"Running\"/>\r\n    </state>\r\n    <state name=\"Running\">\r\n      <transition event=\"Fault\" nextState=\"OutOfService\"/>\r\n      <state name=\"Washing\">\r\n        <transition event=\"WashingDone\" nextState=\"Rinsing\"/>\r\n      </state>\r\n      <state name=\"Rinsing\">\r\n        <transition event=\"RinsingDone\" nextState=\"Spinning\"/>\r\n      </state>\r\n      <state name=\"Spinning\">\r\n        <transition event=\"SpinningDone\" nextState=\"End\"/>\r\n      </state>\r\n      <state name=\"History\" kind=\"history\"/>\r\n    </state>\r\n    <state name=\"OutOfService\">\r\n      <transition event=\"DiagnoseSuccess\" nextState=\"History\"/>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\"/>\r\n  </state>\r\n</sm:StateMachine>\r\n\r\n",
    "BookingProcess.fsmcs": "<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1                                      http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\">\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.BookingProcess\">\r\n        <object instance=\"controller\" class=\"BookingProcessController\"/>\r\n        <object instance=\"view\" class=\"BookingProcessView\"/>\r\n        <object instance=\"printer\" class=\"Printer\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"SystemEvent\">\r\n            <event id=\"evStop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"UserEvent\">\r\n            <event id=\"evUserStart\"/>\r\n            <event id=\"evSeatValidSelection\"/>\r\n            <event id=\"evSeatInvalidSelection\"/>\r\n            <event id=\"evPromotionNotEligible\"/>\r\n            <event id=\"evPromotionElegible\"/>\r\n            <event id=\"evNoPromotionSelected\"/>\r\n            <event id=\"evUserPaymentValidate\"/>\r\n            <event id=\"evUserContinue\"/>\r\n            <event id=\"evUserAbort\"/>\r\n        </eventSource>\r\n        <eventSource name=\"PrinterEvent\">\r\n            <event id=\"evTickedPrinted\"/>\r\n            <event id=\"evTicketPrintedError\"/>\r\n        </eventSource>\r\n        <eventSource name=\"PaymentEvent\">\r\n            <event id=\"evPaymentSuccess\"/>\r\n            <event id=\"evPaymentError\"/>\r\n        </eventSource>\r\n        <eventSource name=\"TimerEvent\">\r\n            <timer id=\"evTimerMaxProcessing\" name=\"MaxProcessing\"/>\r\n            <timer id=\"evTimerError\" name=\"Error\"/>\r\n        </eventSource>\r\n    </events>\r\n    <!-- States -->\r\n    <state name=\"BookingProcess\">\r\n        <transition event=\"evStop\" nextState=\"End\"/>\r\n        <state name=\"WaitForRequest\">\r\n            <onEntry>\r\n                <action>view.showWelcome()</action>\r\n            </onEntry>\r\n            <transition event=\"evUserStart\" nextState=\"SeatChoosing\"/>\r\n        </state>\r\n        <state name=\"Processing\">\r\n            <onEntry>\r\n                <timerStart timer=\"MaxProcessing\" duration=\"60000\"/>\r\n            </onEntry>\r\n            <transition event=\"evTimerMaxProcessing\" nextState=\"Error\">\r\n                <action>controller.setError(ERROR_TIMOUT)</action>\r\n            </transition>\r\n            <transition event=\"evUserAbort\" nextState=\"End\"/>\r\n            <state name=\"SeatChoosing\">\r\n                <onEntry>\r\n                    <action>view.showSeatChoosing()</action>\r\n                </onEntry>\r\n                <transition event=\"evSeatValidSelection\" nextState=\"PromotionSelection\"/>\r\n            </state>\r\n            <state name=\"PromotionSelection\">\r\n                <onEntry>\r\n                    <action>view.showPromotionSelection()</action>\r\n                </onEntry>\r\n                <transition event=\"evPromotionNotEligible\" nextState=\"PromotionSelection\"/>\r\n                <transition event=\"evPromotionElegible\" nextState=\"PaymentReview\"/>\r\n                <transition event=\"evNoPromotionSelected\" nextState=\"PaymentReview\"/>\r\n            </state>\r\n            <state name=\"PaymentReview\">\r\n                <onEntry>\r\n                    <action>view.showPaymentReview()</action>\r\n                </onEntry>\r\n                <transition event=\"evUserPaymentValidate\" nextState=\"PaymentValidation\"/>\r\n            </state>\r\n            <state name=\"PaymentValidation\">\r\n                <onEntry>\r\n                    <action>view.showPaymentValidation()</action>\r\n                    <action>payment.start()</action>\r\n                </onEntry>\r\n                <transition event=\"evPaymentSuccess\" nextState=\"Printing\"/>\r\n                <transition event=\"evPaymentError\" nextState=\"PaymentReview\"/>\r\n            </state>\r\n            <state name=\"Printing\">\r\n                <onEntry>\r\n                    <action>view.showPrinting()</action>\r\n                    <action>printer.startPrintTicket()</action>\r\n                </onEntry>\r\n                <transition event=\"evTicketPrintedError\" nextState=\"Error\">\r\n                    <action>printer.signalFailure()</action>\r\n                </transition>\r\n                <transition event=\"evTickedPrinted\" nextState=\"End\"/>\r\n            </state>\r\n        </state>\r\n        <state name=\"Error\">\r\n            <onEntry>\r\n                <action>view.showError()</action>\r\n                <timerStart timer=\"Error\" duration=\"30000\"/>\r\n            </onEntry>\r\n            <transition event=\"evUserContinue\" nextState=\"End\"/>\r\n            <transition event=\"evTimerError\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\"/>\r\n    </state>\r\n</sm:StateMachine>",
    "CallBase01.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.CallManager\">\r\n        <object instance=\"callControl\" class=\"CallControl\"/>\r\n        <object instance=\"callScenario\" class=\"CallScenario\"/>\r\n        <object instance=\"config\" class=\"CallBase01Config\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IManagementAction\" file=\"IManagement.cs\" feeder=\"CallScenario\"/>\r\n        <eventSource name=\"ICallEvent\" file=\"ICallEvent.cs\" feeder=\"CallScenario\"/>\r\n        <!--<eventSource name=\"ICallAction\" file=\"ICallAction.cs\" feeder=\"CallManager\"/>-->\r\n        <eventSource name=\"Timers\">\r\n            <timer id=\"EvTimerTestMaxDuration\" name=\"TestMaxDuration\"/>\r\n            <!--<timer id=\"EvTimerCallDuration\" name=\"CallDuration\"/>\r\n            <timer id=\"EvTimerRingDuration\" name=\"RingDuration\"/>-->\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"CallBase01\">\r\n        <!--<transition event=\"EvTimerTestMaxDuration\" nextState=\"Error\">\r\n            <action>callManager.Error = \"EvTimerTestMaxDuration\"</action>\r\n        </transition>-->\r\n        <!-- \r\n       <transition event=\"EvStop\"                 nextState=\"Error\">\r\n            <action>callManager.Error = \"EvStop\"</action>\r\n        </transition>\r\n        <transition event=\"EvTokenInvalid\"         nextState=\"Error\">\r\n            <action>callManager.Error = \"An invalid call token has been used\"</action>\r\n        </transition>-->\r\n\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Running\">\r\n                <timerStart timer=\"TestMaxDuration\" duration=\"config.TestMaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Running -->\r\n        <state name=\"Running\">\r\n            <parallel nextState=\"End\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"Alice\">\r\n                    <!-- State A_Setup_B -->\r\n                    <state name=\"A_Setup_B\" description=\"A calls B and waits for being alerted or for call establishment\">\r\n                        <onEntry>\r\n                            <action>callControl.Setup(\"Alice\", \"Bob\", \"AB\")</action>\r\n\r\n                        </onEntry>\r\n                        <transition event=\"EvTimerTestMaxDuration\" nextState=\"End\">\r\n                            <action>callControl.Error = \"EvTimerTestMaxDuration\"</action>\r\n                        </transition>\r\n                        <transition event=\"IncomingConnection\" nextState=\"A_End\">\r\n                            <condition>connection.Endpoint.Name == \"CpeB\"</condition>\r\n\r\n                        </transition>\r\n                    </state>\r\n\r\n                    <!-- State A_Alerting_B -->\r\n                    <!--<state  name=\"A_Alerting_B\" description=\"A waits for the call to be established\">\r\n                        <transition event=\"EvCallEstablished\" nextState=\"A_Established_B\">\r\n                            <condition>call.Token == callManager.Token(\"AB\")</condition>\r\n                        </transition>\r\n                    </state>-->\r\n\r\n                    <!-- State A_Established_B -->\r\n                    <!--<state  name=\"A_Established_B\" description=\"A waits for the CallDuration timer to expire\">\r\n                        <onEntry>\r\n                            <timerStart timer=\"CallDuration\" duration=\"config.CallDuration\"/>\r\n                        </onEntry>\r\n                        <transition event=\"EvTimerCallDuration\" nextState=\"A_Release_B\"/>\r\n                    </state>-->\r\n\r\n                    <!-- State A_Release_B -->\r\n                    <!--<state name=\"A_Release_B\" description=\"A hangs up B\">\r\n                        <onEntry>\r\n                            <action>callManager.Clear(callManager.Token(\"AB\"))</action>\r\n                        </onEntry>\r\n                        <transition event=\"EvConnectionReleased\">\r\n                            <condition>connection.Call.Token == callManager.Token(\"AB\")</condition>\r\n                        </transition>\r\n                        <transition event=\"EvCallCleared\" nextState=\"A_End\">\r\n                            <condition>call.Token == callManager.Token(\"AB\")</condition>\r\n                        </transition>\r\n                    </state>-->\r\n\r\n                    <!-- State End -->\r\n                    <state name=\"A_End\" kind=\"final\"/>\r\n                </state>\r\n                <!-- Machine Alice -->\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"Bob\">\r\n\r\n                    <!-- State B_Waiting_A -->\r\n                    <state name=\"B_Waiting_A\" description=\"B waits for incoming call from A\">\r\n                        <transition event=\"IncomingConnection\" nextState=\"B_Waiting_A\">\r\n                            <condition>connection.Endpoint.Name == \"CpeB\"</condition>\r\n                            <action>callControl.SetToken(\"BA1\", connection.Call.Token)</action>\r\n                        </transition>\r\n                        <transition event=\"IncomingConnection\" nextState=\"End\">\r\n                        </transition>\r\n                        <transition event=\"EvTimerTestMaxDuration\">\r\n                            <action>callControl.Error = \"EvTimerTestMaxDuration\"</action>\r\n                        </transition>\r\n                    </state>\r\n\r\n                    <!-- State B_Ringing_A -->\r\n                    <!--<state name=\"B_Ringing_A\" description=\"B rings until the RingDuration timer expires and answers\">\r\n                        <onEntry>\r\n                            <timerStart timer=\"RingDuration\" duration=\"config.RingDuration\"/>\r\n                        </onEntry>\r\n                        <transition event=\"EvTimerRingDuration\" nextState=\"B_Established_A\">\r\n                            <action>callManager.Answer(callManager.Token(\"BA1\"))</action>\r\n                        </transition>\r\n                    </state>-->\r\n\r\n                    <!-- State B_Established_A -->\r\n                    <!--<state name=\"B_Established_A\" description=\"B waits for the CallDuration timer to expire\">\r\n                        <transition event=\"EvTimerCallDuration\" nextState=\"B_WaitReleasing_A\"/>\r\n                    </state>-->\r\n\r\n                    <!-- State B_WaitReleasing_A -->\r\n                    <!--<state name=\"B_WaitReleasing_A\" description=\"B waits for the call to be releasing\">\r\n                        <transition event=\"EvConnectionReleasing\" nextState=\"B_Releasing_A\">\r\n                            <condition>connection.Call.Token == callManager.Token(\"BA1\")</condition>\r\n                        </transition>\r\n                    </state>-->\r\n\r\n                    <!-- State B_Releasing_A -->\r\n                    <!--<state name=\"B_Releasing_A\" description=\"B waits for the call to be released\">\r\n                        <transition event=\"EvConnectionReleased\">\r\n                            <condition>connection.Call.Token == callManager.Token(\"BA1\")</condition>\r\n                        </transition>\r\n                        <transition event=\"EvCallCleared\" nextState=\"B_End\">\r\n                            <condition>call.Token == callManager.Token(\"BA1\")</condition>\r\n                        </transition>\r\n                    </state>-->\r\n\r\n                    <!-- State End -->\r\n                    <state name=\"B_End\" kind=\"final\"/>\r\n                </state>\r\n                <!-- Machine Called -->\r\n            </parallel>\r\n        </state>\r\n        <!-- Running state -->\r\n\r\n        <!-- End state -->\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n    <!-- Top state -->\r\n</sm:StateMachine>\r\n",
    "CallControl.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                  >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.CallManager\">\r\n        <object instance=\"callControl\" class=\"CallControl\"/>\r\n        <object instance=\"config\" class=\"CallControlConfig\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IManagementAction\" file=\"IManagement.cs\" feeder=\"CallControl\"/>\r\n        <eventSource name=\"IEndpointEvent\" file=\"IEndpointEvent.cs\"/>\r\n        <eventSource name=\"ICallAction\" file=\"ICallAction.cs\"/>\r\n        <eventSource name=\"Timers\">\r\n            <!--<timer id=\"EvTimerTestMaxDuration\" name=\"TestMaxDuration\"/>-->\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"CallControl\">\r\n        <transition event=\"Stop\" nextState=\"Stopping\"/>\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Starting\"/>\r\n        </state>\r\n        <state name=\"Starting\">\r\n            <onEntry action=\"callControl.DoEndpointStart()\"/>\r\n            <transition event=\"EndpointOpened\"\r\n                        condition=\"callControl.IsLastToOpen() == true\" \r\n                        action=\"callControl.Started()\"\r\n                        nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n        </state>\r\n        <state name=\"Stopping\">\r\n            <onEntry action=\"callControl.DoEndpointStop()\"/>\r\n            <transition event=\"EndpointClosed\" \r\n                        condition=\"callControl.IsLastToClose() == true\"\r\n                        action=\"callControl.Stopped()\"\r\n                        nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>",
    "CallDirector.fsmcs": "<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                     xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                         http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.CallManager\">\r\n        <object instance=\"callControl\" class=\"CallControl\"/>\r\n        <object instance=\"callScenario\" class=\"CallScenario\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Execution\" feeder=\"CallDirector\">\r\n            <event id=\"StartExecution\"/>\r\n            <event id=\"StopExecution\"/>\r\n        </eventSource>\r\n        <eventSource name=\"CallControl\">\r\n            <event id=\"CallControlStarted\"/>\r\n            <event id=\"CallControlStopped\"/>\r\n        </eventSource>\r\n        <eventSource name=\"CallScenario\">\r\n            <event id=\"CallScenarioEnd\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"CallDirector\">\r\n        <transition event=\"StopExecution\" nextState=\"Stopping\"/>\r\n        <state name=\"Idle\">\r\n            <transition event=\"StartExecution\" nextState=\"Starting\"/>\r\n        </state>\r\n        <state name=\"Starting\">\r\n            <onEntry action=\"callControl.Start()\"/>\r\n            <transition event=\"CallControlStarted\" nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n            <onEntry action=\"callScenario.Start()\"/>\r\n            <transition event=\"CallScenarioEnd\" nextState=\"Stopping\"/>\r\n        </state>\r\n        <state name=\"Stopping\">\r\n            <onEntry action=\"callControl.Stop()\"/>\r\n            <transition event=\"CallControlStopped\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>",
    "Door.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings name=\"\" asynchronous=\"true\" namespace=\"StateForge.Examples.Door\">\r\n        <description>Door</description>\r\n        <object instance=\"engine\" class=\"IEngine\"/>\r\n        <context class=\"DoorContext\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"Management\" feeder=\"Door\">\r\n            <event id=\"Start\"/>\r\n            <event id=\"Quit\"/>\r\n        </eventSource>\r\n        <eventSource name=\"RemoteControl\" feeder=\"Door\">\r\n            <event id=\"OpenRequest\"/>\r\n            <event id=\"CloseRequest\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Sensors\" feeder=\"Door\">\r\n            <event id=\"SensorOpened\"/>\r\n            <event id=\"SensorClosed\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Door\">\r\n        <transition event=\"Quit\" nextState=\"End\"/>\r\n\r\n        <state name=\"Init\">\r\n            <transition event=\"Start\" nextState=\"Operating\"/>\r\n        </state>\r\n        <state name=\"Operating\">\r\n            <state name=\"Closed\">\r\n                <transition event=\"OpenRequest\" nextState=\"Opening\"/>\r\n            </state>\r\n            <state name=\"Opening\">\r\n                <onEntry action=\"engine.StartOpen()\"/>\r\n                <onExit action=\"engine.Stop()\"/>\r\n                <transition event=\"CloseRequest\" nextState=\"Closing\"/>\r\n                <transition event=\"SensorOpened\" nextState=\"Opened\"/>\r\n            </state>\r\n            <state name=\"Opened\">\r\n                <transition event=\"CloseRequest\" nextState=\"Closing\"/>\r\n            </state>\r\n            <state name=\"Closing\">\r\n                <onEntry action=\"engine.StartClose()\"/>\r\n                <onExit action=\"engine.Stop()\"/>\r\n                <transition event=\"OpenRequest\" nextState=\"Opening\"/>\r\n                <transition event=\"SensorClosed\" nextState=\"Closed\"/>\r\n            </state>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "DoorTest01.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.Door.Test\">\r\n        <object instance=\"doorTest\" class=\"DoorTest\"/>\r\n        <object instance=\"door\" class=\"Door\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"DoorTest\">\r\n            <timer id=\"EvTimer\" name=\"Timer\"/>\r\n        </eventSource>\r\n        <eventSource name=\"IEngine\" file=\"../../Door.cs\"/>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"DoorTest01\">\r\n        <onEntry action=\"door.Start();\"/>\r\n\r\n        <state name=\"Closed\">\r\n            <onEntry action=\"door.OpenRequest()\"/>\r\n            <transition event=\"StartOpen\" nextState=\"Opening\"/>\r\n        </state>\r\n\r\n        <state name=\"Opening\">\r\n            <onEntry>\r\n                <timerStart timer=\"Timer\" duration=\"doorTest.DurationOpening\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimer\" nextState=\"StopOpening\"/>\r\n        </state>\r\n\r\n        <state name=\"StopOpening\">\r\n            <onEntry action=\"door.SensorOpened();\"/>\r\n            <transition event=\"Stop\" nextState=\"Opened\"/>\r\n        </state>\r\n\r\n        <state name=\"Opened\">\r\n            <onEntry action=\"door.CloseRequest();\"/>\r\n            <transition event=\"StartClose\" nextState=\"Closing\"/>\r\n        </state>\r\n\r\n        <state name=\"Closing\">\r\n            <onEntry>\r\n                <timerStart timer=\"Timer\" duration=\"doorTest.DurationOpening\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimer\" nextState=\"StopClosing\"/>\r\n        </state>\r\n\r\n        <state name=\"StopClosing\">\r\n            <onEntry action=\"door.SensorClosed();\"/>\r\n            <transition event=\"Stop\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "DoorTest02.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.Door.Test\">\r\n        <object instance=\"doorTest\" class=\"DoorTest\"/>\r\n        <object instance=\"door\" class=\"Door\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"DoorTest\">\r\n            <timer id=\"EvTimer\" name=\"Timer\"/>\r\n        </eventSource>\r\n        <eventSource name=\"IEngine\" file=\"../../Door.cs\"/>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"DoorTest02\">\r\n        <onEntry action=\"door.Start();\"/>\r\n\r\n        <state name=\"Closed\">\r\n            <onEntry action=\"door.OpenRequest()\"/>\r\n            <transition event=\"StartOpen\" nextState=\"Opening\"/>\r\n        </state>\r\n\r\n        <state name=\"Opening\">\r\n            <onEntry>\r\n                <timerStart timer=\"Timer\" duration=\"doorTest.DurationOpening\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimer\" nextState=\"StopOpening\"/>\r\n        </state>\r\n\r\n        <state name=\"StopOpening\">\r\n            <onEntry action=\"door.CloseRequest();\"/>\r\n            <transition event=\"Stop\" nextState=\"NotFullyOpened\"/>\r\n        </state>\r\n\r\n        <state name=\"NotFullyOpened\">\r\n            <transition event=\"StartClose\" nextState=\"Closing\"/>\r\n        </state>\r\n\r\n        <state name=\"Closing\">\r\n            <onEntry>\r\n                <timerStart timer=\"Timer\" duration=\"doorTest.DurationOpening\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimer\" nextState=\"StopClosing\"/>\r\n        </state>\r\n\r\n        <state name=\"StopClosing\">\r\n            <onEntry action=\"door.OpenRequest();\"/>\r\n            <transition event=\"Stop\" nextState=\"Opening2\"/>\r\n        </state>\r\n\r\n        <state name=\"Opening2\">\r\n            <transition event=\"StartOpen\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "EndpointTest.fsmcs": "<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                     xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                         http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.CallManager\">\r\n        <object instance=\"endpoint\" class=\"EndpointTest\"/>\r\n        <object instance=\"config\" class=\"EndpointTestConfig\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Management\">\r\n            <event id=\"Open\"/>\r\n            <event id=\"Close\"/>\r\n        </eventSource>\r\n        <eventSource name=\"ICallAction\" file=\"ICallAction.cs\" feeder=\"EndpointTest\"/>\r\n        <eventSource name=\"Timers\">\r\n            <timer id=\"EvTimerOpen\" name=\"TimerOpen\"/>\r\n            <timer id=\"EvTimerClose\" name=\"TimerClose\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"EndpointTest\">\r\n        <transition event=\"Close\" nextState=\"Closing\"/>\r\n        <state name=\"Idle\">\r\n            <transition event=\"Open\" nextState=\"Opening\"/>\r\n        </state>\r\n        <state name=\"Opening\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerOpen\" duration=\"config.DurationOpen\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimerOpen\" action=\"endpoint.Opened()\" nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n        </state>\r\n        <state name=\"Closing\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerClose\" duration=\"config.DurationClose\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimerClose\" action=\"endpoint.Closed()\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Executor.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.FixMachine\">\r\n        <object instance=\"executor\" class=\"Executor\"/>\r\n        <using>QuickFix</using>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"FixMachine\">\r\n            <event id=\"EvCreate\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvLogon\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvLogout\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvToAdmin\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvToApp\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvFromAdmin\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvFromApp\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Executor\">\r\n        <state name=\"Initial\">\r\n        </state>\r\n        <state name=\"Logging\">\r\n            <transition event=\"EvCreate\" nextState=\"LoggedIn\"/>\r\n        </state>\r\n\r\n        <state name=\"LoggedIn\">\r\n\r\n        </state>\r\n\r\n        <state name=\"LoggedOut\">\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "HelloWorld.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"Company.Product\">\r\n        <object instance=\"helloWorld\" class=\"HelloWorld\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"HelloWorldEvent\" feeder=\"HelloWorld\">\r\n            <event id=\"EvPrint\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"HelloWorld\">\r\n        <state name=\"Idle\">\r\n            <transition event=\"EvPrint\" nextState=\"End\" action=\"helloWorld.DoPrint()\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Led.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.Led\">\r\n        <object instance=\"led\" class=\"Led\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"LedControl\">\r\n            <event id=\"On\"/>\r\n            <event id=\"Off\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Led\">\r\n        <state name=\"SwitchedOff\">\r\n            <onEntry action=\"led.DoOff()\"/>\r\n            <transition event=\"On\" nextState=\"SwitchedOn\"/>\r\n        </state>\r\n        <state name=\"SwitchedOn\">\r\n            <onEntry action=\"led.DoOn()\"/>\r\n            <transition event=\"Off\" nextState=\"SwitchedOff\"/>\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Light.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.Light\">\r\n        <object instance=\"light\" class=\"ILightActuator\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"SwitchEvent\" feeder=\"Light\">\r\n            <event id=\"EvOn\"/>\r\n            <event id=\"EvOff\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Light\">\r\n        <state name=\"Off\">\r\n            <onEntry action=\"light.DoOff()\"/>\r\n            <transition event=\"EvOn\" nextState=\"On\"/>\r\n        </state>\r\n        <state name=\"On\">\r\n            <onEntry action=\"light.DoOn()\"/>\r\n            <transition event=\"EvOff\" nextState=\"Off\"/>\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Microwave.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.Microwave\">\r\n        <object instance=\"microwave\" class=\"Microwave\"/>\r\n    </settings>\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"Microwave\" feeder=\"Microwave\">\r\n            <event id=\"EvStart\"/>\r\n            <event id=\"EvStop\"/>\r\n            <event id=\"EvTurnOn\"/>\r\n            <event id=\"EvTurnOff\"/>\r\n        </eventSource>\r\n        <eventSource name=\"CookingAnalyzer\" feeder=\"Microwave\">\r\n            <event id=\"EvCookingDone\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Door\" feeder=\"Microwave\">\r\n            <event id=\"EvDoorOpened\"/>\r\n            <event id=\"EvDoorClosed\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Microwave\">\r\n        <transition event=\"EvStop\" nextState=\"End\"/>\r\n        <state name=\"Initial\">\r\n            <transition event=\"EvStart\" nextState=\"Operating\"/>\r\n        </state>\r\n        <state name=\"Operating\">\r\n            <parallel nextState=\"End\">\r\n                <!-- First region is the engine -->\r\n                <state name=\"Engine\">\r\n                    <state name=\"EngineOff\">\r\n                        <transition event=\"EvTurnOn\"\r\n                                    condition=\"context.ContextParent.MicrowaveOperatingParallel.MicrowaveDoorContext.StateCurrent == MicrowaveDoorOpenedState.Instance\"\r\n                                    nextState=\"EngineWaitDoorToClose\"/>\r\n                        <transition event=\"EvTurnOn\" nextState=\"EngineCooking\"/>\r\n                    </state>\r\n                    <state name=\"EngineOn\">\r\n                        <transition event=\"EvTurnOff\" nextState=\"EngineOff\"/>\r\n                        <transition event=\"EvCookingDone\" nextState=\"EngineOff\"/>\r\n                        <state name=\"EngineWaitDoorToClose\">\r\n                            <transition event=\"EvDoorClosed\" nextState=\"EngineCooking\"/>\r\n                        </state>\r\n                        <state name=\"EngineCooking\">\r\n                            <transition event=\"EvDoorOpened\" nextState=\"EngineWaitDoorToClose\"/>\r\n                        </state>\r\n                    </state>\r\n                </state>\r\n                <!-- Second region is the door -->\r\n                <state name=\"Door\">\r\n                    <state name=\"DoorClosed\">\r\n                        <transition event=\"EvDoorOpened\" nextState=\"DoorOpened\"/>\r\n                    </state>\r\n                    <state name=\"DoorOpened\">\r\n                        <transition event=\"EvDoorClosed\" nextState=\"DoorClosed\"/>\r\n                    </state>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n\r\n</sm:StateMachine>\r\n",
    "Ping.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    \r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.Ping\">\r\n        <object instance=\"ping\" class=\"Ping\"/>\r\n    </settings>\r\n    \r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Ping\" feeder=\"Ping\">\r\n            <event id=\"StartPing\"/>\r\n            <event id=\"Cancel\" preAction=\"ping.DoCancel()\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Internal\">\r\n            <event id=\"EvError\"/>\r\n            <event id=\"EvPingReply\" preAction=\"ping.Rx++\"/>\r\n            <timer id=\"EvTimer\" name=\"Timer\" preAction=\"ping.PrintStatistics()\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Ping\">\r\n        <state name=\"Idle\">\r\n            <transition event=\"StartPing\" nextState=\"SendPingAndWaitForReply\"/>\r\n        </state>\r\n        <state name=\"SendPingAndWaitForReply\">\r\n            <onEntry>\r\n                <action>ping.Send()</action>\r\n                <action>ping.Tx++</action>\r\n                <timerStart timer=\"Timer\" duration=\"ping.Timeout\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"Timer\"/>\r\n            </onExit>\r\n            <transition event=\"Cancel\" nextState=\"End\"/>\r\n            <transition event=\"EvPingReply\" condition=\"ping.Tx == ping.Count\" nextState=\"End\"/>\r\n            <transition event=\"EvTimer\" condition=\"ping.Tx == ping.Count\" nextState=\"End\"/>\r\n            <transition event=\"EvTimer\" nextState=\"SendPingAndWaitForReply\" />\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Seminar.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.Seminar\">\r\n        <object instance=\"mySeminar\" class=\"SeminarActuator\"/>\r\n        <context class=\"SeminarContext\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Seminar\" feeder=\"Seminar\">\r\n            <event id=\"Cancelled\"/>\r\n            <event id=\"TermStarted\"/>\r\n            <event id=\"ClassesEnded\"/>\r\n            <event id=\"ExamsClosed\"/>\r\n            <event id=\"StudentEnrollRequest\">\r\n                <parameter name=\"student\" type=\"Student\"/>\r\n            </event>\r\n            <event id=\"StudentDropped\"\r\n                   preAction=\"mySeminar.RemoveConfirmedStudent(student)\">\r\n                <parameter name=\"student\" type=\"Student\"/>\r\n            </event>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Seminar\">\r\n        <transition event=\"Cancelled\" nextState=\"End\"/>\r\n        <!-- States Enrollment -->\r\n        <state name=\"Enrollment\">\r\n            <onEntry action=\"mySeminar.StartEnrollment()\"/>\r\n            <onExit action=\"mySeminar.StopEnrollment()\"/>\r\n\r\n            <transition event=\"TermStarted\" nextState=\"BeingTaught\"/>\r\n            <!-- States OpenForEnrollment -->\r\n            <state name=\"OpenForEnrollment\">\r\n                <transition event=\"StudentEnrollRequest\" condition=\"(mySeminar.StudentsCount + 1) == mySeminar.MaxStudents\" nextState=\"Full\">\r\n                    <action>mySeminar.ConfirmStudentEnrollment(student)</action>\r\n                </transition>\r\n                <transition event=\"StudentEnrollRequest\">\r\n                    <action>mySeminar.ConfirmStudentEnrollment(student)</action>\r\n                </transition>\r\n                <transition event=\"StudentDropped\"/>\r\n            </state>\r\n            <!-- States Full -->\r\n            <state name=\"Full\">\r\n                <transition event=\"StudentEnrollRequest\">\r\n                    <action>mySeminar.AddStudentInWaitingList(student);</action>\r\n                </transition>\r\n                <transition event=\"StudentDropped\" condition=\"mySeminar.HasStudentInWaitingList()\">\r\n                    <action>mySeminar.InformStudentInWaitingList()</action>\r\n                </transition>\r\n                <transition event=\"StudentDropped\"  nextState=\"OpenForEnrollment\"/>\r\n            </state>\r\n        </state>\r\n        <!-- States BeingTaught -->\r\n        <state name=\"BeingTaught\">\r\n            <onEntry action=\"mySeminar.StartTeaching()\"/>\r\n            <onExit action=\"mySeminar.StopTeaching()\"/>\r\n            <transition event=\"StudentDropped\" condition=\"mySeminar.IsEmpty()\" nextState=\"End\"/>\r\n            <transition event=\"ClassesEnded\" nextState=\"FinalExams\"/>\r\n        </state>\r\n        <!-- States FinalExams -->\r\n        <state name=\"FinalExams\">\r\n            <onEntry action=\"mySeminar.StartExams()\"/>\r\n            <transition event=\"ExamsClosed\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestChat01.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"TestChat01\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <transition event=\"Error\" action=\"chatScenario.Error = exception.Message\" nextState=\"End\"/>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        \r\n        <!-- State Login -->\r\n        <state name=\"XmppLogin\">\r\n            <parallel nextState=\"Chatting\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"AliceLogin\">\r\n                    <!-- State Alice_Login -->\r\n                    <transition event=\"Closed\" nextState=\"End\">\r\n                        <action>chatScenario.Error = \"Event closed has been received for Alice\"</action>\r\n                    </transition>\r\n                    <state name=\"Alice_Login\" description=\"Alice logins\">\r\n                        <onEntry action=\"alice.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_WaitPresence\"/>\r\n                    </state>\r\n                    <!-- State Alice_WaitPresence -->\r\n                    <state name=\"Alice_WaitPresence\" description=\"Alice wait for presence\">\r\n                        <transition event=\"PresenceRx\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Login_End\"/>\r\n                    </state>                    \r\n                    <!-- State Alice_Login_End -->\r\n                    <state name=\"Alice_Login_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"BobLogin\">\r\n                    <transition event=\"Closed\" nextState=\"End\">\r\n                        <action>chatScenario.Error = \"Event closed has been received for Bob\"</action>\r\n                    </transition>\r\n                    <!-- State Bob_Login -->\r\n                    <state name=\"Bob_Login\" description=\"Bob logins\">\r\n                        <onEntry action=\"bob.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_WaitPresence\"/>\r\n                    </state>\r\n                    <!-- State Bob_WaitPresence -->\r\n                    <state name=\"Bob_WaitPresence\" description=\"Alice wait for presence\">\r\n                        <transition event=\"PresenceRx\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_Login_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Login_End -->\r\n                    <state name=\"Bob_Login_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <!-- State Chatting -->\r\n        <state name=\"Chatting\">\r\n            <parallel nextState=\"Closing\">\r\n                <!-- Machine AliceChatting -->\r\n                <state name=\"AliceChatting\">\r\n                    <!-- State Alice_Sending -->\r\n                    <state name=\"Alice_Sending\" description=\"Alice sends a message to Bob and waits for the reply\">\r\n                        <onEntry action=\"alice.SendChat(bob.Jid, &quot;Ciao&quot;)\"/>\r\n                        <transition event=\"MessageRx\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Chatting_End\"/>\r\n                    </state>\r\n                    <!-- State Alice_Closing_End -->\r\n                    <state name=\"Alice_Chatting_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine BobChatting -->\r\n                <state name=\"BobChatting\">\r\n                    <!-- State Bob_WaitMessage -->\r\n                    <state name=\"Bob_WaitMessage\" description=\"Bob wait a messsage from Alice and reply\">\r\n                        <transition event=\"MessageRx\" \r\n                                    condition=\"jid.User == bob.Jid.User\" \r\n                                    action=\"bob.SendChat(alice.Jid, &quot;Bene, grazie&quot;)\" \r\n                                    nextState=\"Bob_Chatting_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Chatting_End -->\r\n                    <state name=\"Bob_Chatting_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <state name=\"Closing\" description=\"Everyone is closing\">\r\n            <onEntry action=\"chatScenario.CloseAll()\"/>\r\n            <transition event=\"ClosedAll\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestLogin.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestLogin\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"Alice_End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Alice_Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Login -->\r\n        <state name=\"Alice_Login\" description=\"Alice logins\">\r\n            <onEntry action=\"alice.Open()\"/>\r\n            <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Idle\"/>\r\n        </state>\r\n        <!-- State Alice_Idle -->\r\n        <state name=\"Alice_Idle\" description=\"Alice start timer and go to next state upon expiring\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerIdleDuration\" duration=\"chatScenario.IdleDuration\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"TimerIdleDuration\"/>\r\n            </onExit>\r\n            <transition event=\"Closed\" nextState=\"Alice_End\">\r\n                <action>chatScenario.Error = \"Event closed has been received\"</action>\r\n            </transition>\r\n            <transition event=\"EvTimerIdleDuration\" nextState=\"Alice_Closing\"/>\r\n        </state>\r\n        <!-- State Alice_Closing -->\r\n        <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n            <onEntry action=\"alice.Close()\"/>\r\n            <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n        </state>\r\n        <!-- State Alice_End -->\r\n        <state name=\"Alice_End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestLogin02.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    \r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestLogin02\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Login -->\r\n        <state name=\"Login\" description=\"Everyone logins\">\r\n            <onEntry action=\"chatScenario.OpenAll()\"/>\r\n            <transition event=\"LoggedInAll\" nextState=\"LoggedIn\"/>\r\n        </state>\r\n        <!-- State Idle -->\r\n        <state name=\"LoggedIn\" description=\"\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerIdleDuration\" duration=\"chatScenario.IdleDuration\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimerIdleDuration\" nextState=\"Closing\"/>\r\n        </state>\r\n        <!-- State Closing -->\r\n        <state name=\"Closing\" description=\"Everyone is closing\">\r\n            <onEntry action=\"chatScenario.CloseAll()\"/>\r\n            <transition event=\"ClosedAll\" nextState=\"End\"/>\r\n        </state>\r\n        <!-- State End -->\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestOpenClose01.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestOpenClose01\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Running\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n\r\n        <!-- State Running -->\r\n        <state name=\"Running\">\r\n            <parallel nextState=\"End\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"Alice\">\r\n                    <!-- State Alice_Login -->\r\n                    <state name=\"Alice_Login\" description=\"Alice logins\">\r\n                        <onEntry action=\"alice.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Closing\"/>\r\n                    </state>\r\n                    <!-- State Alice_Closing -->\r\n                    <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n                        <onEntry action=\"alice.Close()\"/>\r\n                        <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n                    </state>\r\n                    <!-- State Alice_End -->\r\n                    <state name=\"Alice_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"Bob\">\r\n                    <!-- State Bob_Login -->\r\n                    <state name=\"Bob_Login\" description=\"Bob logins\">\r\n                        <onEntry action=\"bob.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_Closing\"/>\r\n                    </state>\r\n                    <!-- State Bob_Closing -->\r\n                    <state name=\"Bob_Closing\" description=\"Bob is closing\">\r\n                        <onEntry action=\"bob.Close()\"/>\r\n                        <transition event=\"Closed\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_End -->\r\n                    <state name=\"Bob_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestOpenClose02.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestOpenClose02\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        \r\n        <!-- State Login -->\r\n        <state name=\"Login\">\r\n            <transition event=\"Closed\" nextState=\"End\">\r\n                <action>chatScenario.Error = \"Event closed has been received\"</action>\r\n            </transition>\r\n            <parallel nextState=\"Closing\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"AliceLogin\">\r\n                    <!-- State Alice_Login -->\r\n                    <state name=\"Alice_Login\" description=\"Alice logins\">\r\n                        <onEntry action=\"alice.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Login_End\"/>\r\n                    </state>\r\n                    <!-- State Alice_Login_End -->\r\n                    <state name=\"Alice_Login_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"BobLogin\">\r\n                    <!-- State Bob_Login -->\r\n                    <state name=\"Bob_Login\" description=\"Bob logins\">\r\n                        <onEntry action=\"bob.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_Login_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Login_End -->\r\n                    <state name=\"Bob_Login_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <!-- State Closing -->\r\n        <state name=\"Closing\">\r\n            <parallel nextState=\"End\">\r\n                <!-- Machine AliceClosing -->\r\n                <state name=\"AliceClosing\">\r\n                    <!-- State Alice_Closing -->\r\n                    <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n                        <onEntry action=\"alice.Close()\"/>\r\n                        <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Closing_End\"/>\r\n                    </state>\r\n                    <!-- State Alice_Closing_End -->\r\n                    <state name=\"Alice_Closing_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"BobClosing\">\r\n                    <!-- State Bob_Closing -->\r\n                    <state name=\"Bob_Closing\" description=\"Bob is closing\">\r\n                        <onEntry action=\"bob.Close()\"/>\r\n                        <transition event=\"Closed\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_Closing_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Closing_End -->\r\n                    <state name=\"Bob_Closing_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>        \r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestRegisterNewAccount.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestRegisterNewAccount\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"Alice_End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Alice_RegisterNewAccount\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_RegisterNewAccount -->\r\n        <state name=\"Alice_RegisterNewAccount\" description=\"Alice registers a new account\">\r\n            <onEntry action=\"alice.RegisterNewAccount()\"/>\r\n            <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Idle\"/>\r\n        </state>\r\n        <!-- State Alice_Idle -->\r\n        <state name=\"Alice_Idle\" description=\"Alice start the idle timer and go to next state upon expiring\">\r\n            <onEntry>\r\n                <timerStart timer=\"TimerIdleDuration\" duration=\"chatScenario.IdleDuration\"/>\r\n            </onEntry>\r\n            <transition event=\"Closed\" nextState=\"Alice_End\">\r\n                <action>chatScenario.Error = \"Event closed has been received\"</action>\r\n            </transition>\r\n            <transition event=\"EvTimerIdleDuration\" nextState=\"Alice_Closing\"/>\r\n        </state>\r\n        <!-- State Alice_Closing -->\r\n        <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n            <onEntry action=\"alice.Close()\"/>\r\n            <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n        </state>\r\n        <!-- State Alice_End -->\r\n        <state name=\"Alice_End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestRosterAdd.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestRosterAdd\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"Alice_End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Alice_Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Login -->\r\n        <state name=\"Alice_Login\" description=\"Alice logins\">\r\n            <onEntry action=\"alice.Open()\"/>\r\n            <transition event=\"LoggedIn\" nextState=\"Alice_WaitRosterEnd\">\r\n                <condition>jid.User == \"Alice\"</condition>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_WaitRosterEnd -->\r\n        <state name=\"Alice_WaitRosterEnd\" description=\"Alice waits for roster end\">\r\n            <transition event=\"RosterEnd\" nextState=\"Alice_RosterAdd\"/>\r\n        </state>\r\n        <!-- State Alice_RosterAdd -->\r\n        <state name=\"Alice_RosterAdd\" description=\"Alice adds bob in roster\">\r\n            <onEntry action=\"alice.RosterAddItem(bob.Jid)\"/>\r\n            <transition event=\"RosterItem\" nextState=\"Alice_Closing\">\r\n                <condition><![CDATA[jid.Equals(alice.Jid) && (item.Jid.Equals(bob.Jid))]]></condition>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Closing -->\r\n        <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n            <onEntry action=\"alice.Close()\"/>\r\n            <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n        </state>\r\n        <!-- State Alice_End -->\r\n        <state name=\"Alice_End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestRosterAddRemove.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestRosterAddRemove\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"Alice_End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Alice_Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Login -->\r\n        <state name=\"Alice_Login\" description=\"Alice logins\">\r\n            <onEntry action=\"alice.Open()\"/>\r\n            <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_WaitRosterEnd\"/>\r\n        </state>\r\n        <!-- State Alice_WaitRosterEnd -->\r\n        <state name=\"Alice_WaitRosterEnd\" description=\"Alice waits for roster end\">\r\n            <transition event=\"RosterEnd\" nextState=\"Alice_RosterAddItem\"/>\r\n        </state>\r\n        <!-- State Alice_RosterAddItem -->\r\n        <state name=\"Alice_RosterAddItem\" description=\"Alice adds bob in roster\">\r\n            <onEntry action=\"alice.RosterAddItem(bob.Jid)\"/>\r\n            <transition event=\"RosterItem\" nextState=\"Alice_RosterRemoveItem\">\r\n                <condition><![CDATA[jid.Equals(alice.Jid) && (item.Jid.Equals(bob.Jid))]]></condition>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_RosterRemoveItem -->\r\n        <state name=\"Alice_RosterRemoveItem\" description=\"Alice removes bob from roster\">\r\n            <onEntry action=\"alice.RosterRemoveItem(bob.Jid)\"/>\r\n            <transition event=\"RosterItem\" nextState=\"Alice_Closing\">\r\n                <condition><![CDATA[jid.Equals(alice.Jid) && (item.Jid.Equals(bob.Jid))]]></condition>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Closing -->\r\n        <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n            <onEntry action=\"alice.Close()\"/>\r\n            <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n        </state>\r\n        <!-- State Alice_End -->\r\n        <state name=\"Alice_End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestSubscription01.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerSubscribeMaxDuration\" name=\"TimerSubscribeMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestSubscription\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <transition event=\"Error\" action=\"chatScenario.Error = exception.Message\" nextState=\"End\"/>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        \r\n        <!-- State Login -->\r\n        <state name=\"Login\">\r\n            <parallel nextState=\"RosterItemRemove\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"AliceLogin\">\r\n                    <!-- State Alice_Login -->\r\n                    <state name=\"Alice_Login\" description=\"Alice logins\">\r\n                        <onEntry action=\"alice.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_WaitPresence\"/>\r\n                    </state>\r\n                    <!-- State Alice_WaitPresence -->\r\n                    <state name=\"Alice_WaitPresence\" description=\"Alice wait for presence\">\r\n                        <transition event=\"PresenceRx\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_Login_End\"/>\r\n                    </state>\r\n                    <!-- State Alice_Login_End -->\r\n                    <state name=\"Alice_Login_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"BobLogin\">\r\n                    <!-- State Bob_Login -->\r\n                    <state name=\"Bob_Login\" description=\"Bob logins\">\r\n                        <onEntry action=\"bob.Open()\"/>\r\n                        <transition event=\"LoggedIn\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_WaitPresence\"/>\r\n                    </state>\r\n                    <!-- State Bob_WaitPresence -->\r\n                    <state name=\"Bob_WaitPresence\" description=\"Bob wait for presence\">\r\n                        <transition event=\"PresenceRx\" condition=\"jid.User == bob.Jid.User\" nextState=\"Bob_Login_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Login_End -->\r\n                    <state name=\"Bob_Login_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <!-- State RosterItemRemove -->\r\n        <state name=\"RosterItemRemove\">\r\n            <parallel nextState=\"Subscription\">\r\n                <!-- Machine AliceRosterItemRemove -->\r\n                <state name=\"AliceRosterItemRemove\">\r\n                    <!-- State Alice_RosterItemRemoveAndWaitForReply -->\r\n                    <state name=\"Alice_RosterItemRemoveAndWaitForReply\"\r\n                           description=\"Alice removes Bob from his roster and waits for confirmation\">\r\n                        <onEntry action=\"alice.RosterRemoveItem(bob.Jid)\"/>\r\n                        <transition event=\"RosterItem\" nextState=\"Alice_RosterItemRemoveEnd\">\r\n                            <condition><![CDATA[jid.Equals(alice.Jid) && (item.Jid.Equals(bob.Jid))]]></condition>\r\n                        </transition>\r\n                    </state>\r\n                    <!-- State Alice_RosterItemRemoveEnd -->\r\n                    <state name=\"Alice_RosterItemRemoveEnd\" kind=\"final\"/>\r\n                </state>\r\n                <!-- Machine BobRosterItemRemove -->\r\n                <state name=\"BobRosterItemRemove\">\r\n                    <!-- State Bob_RosterItemRemoveAndWaitForReply -->\r\n                    <state name=\"Bob_RosterItemRemoveAndWaitForReply\"\r\n                           description=\"Bob removes Alice from his roster and waits for confirmation\">\r\n                        <onEntry action=\"bob.RosterRemoveItem(alice.Jid)\"/>\r\n                        <transition event=\"RosterItem\" nextState=\"Bob_RosterItemRemoveEnd\">\r\n                            <condition><![CDATA[jid.Equals(bob.Jid) && (item.Jid.Equals(alice.Jid))]]></condition>\r\n                        </transition>\r\n                    </state>\r\n                    <!-- State Bob_RosterItemRemoveEnd -->\r\n                    <state name=\"Bob_RosterItemRemoveEnd\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <!-- State Subscription -->\r\n        <state name=\"Subscription\">\r\n            <parallel nextState=\"Closing\">\r\n                <!-- Machine AliceSubscription -->\r\n                <state name=\"AliceSubscription\">\r\n                    <!-- State Alice_SendSubscriptionRequestAndWaitForReply -->\r\n                    <state name=\"Alice_SendSubscriptionRequestAndWaitForReply\" \r\n                           description=\"Alice sends a subscribtion request to Bob and waits for the subscribtion confirm\">\r\n                        <onEntry action=\"alice.SubscriptionRequest(bob.Jid)\"/>\r\n                        <transition event=\"SubscribeConfirm\" \r\n                                    condition=\"jid.User == alice.Jid.User\" \r\n                                    nextState=\"Alice_RosterRequest\">\r\n                        </transition>\r\n                    </state>\r\n                    <!-- State Alice_RosterRequest -->\r\n                    <state name=\"Alice_RosterRequest\" description=\"Alice sends a roster request\">\r\n                        <onEntry action=\"alice.RosterRequest()\"/>\r\n                        <transition event=\"RosterItem\" nextState=\"Alice_Subscription_End\">\r\n                            <condition><![CDATA[jid.Equals(alice.Jid) && (item.Jid.Equals(bob.Jid))]]></condition>\r\n                        </transition>\r\n                    </state>\r\n                    <!-- State Alice_Subscription_End -->\r\n                    <state name=\"Alice_Subscription_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine BobSubscription -->\r\n                <state name=\"BobSubscription\">\r\n                    <!-- State Bob_WaitForSubscriptionRequestAndSendReply -->\r\n                    <state name=\"Bob_WaitForSubscriptionRequestAndSendReply\" \r\n                           description=\"Bob wait a subscribtion request from Alice and send a subscribtion confirm\">\r\n                        <transition event=\"SubscribeRequest\" \r\n                                    condition=\"jid.User == bob.Jid.User\" \r\n                                    action=\"bob.SubscriptionConfirm(alice.Jid)\" \r\n                                    nextState=\"Bob_Subscription_End\"/>\r\n                    </state>\r\n                    <!-- State Bob_Subscription_End -->\r\n                    <state name=\"Bob_Subscription_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n        <!-- State Closing -->\r\n        <state name=\"Closing\" description=\"Everyone is closing\">\r\n            <onEntry action=\"chatScenario.CloseAll()\"/>\r\n            <transition event=\"ClosedAll\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TestUnSubscribe.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.XmppChat\">\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"IChatScenario\" file=\"IChatScenario.cs\"/>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n            <timer id=\"EvTimerIdleDuration\" name=\"TimerIdleDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"XmppTestUnsubscribe\">\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"Alice_End\">\r\n            <action>chatScenario.Error = \"Maximum duration expired\"</action>\r\n        </transition>\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Alice_Login\">\r\n                <timerStart timer=\"TimerMaxDuration\" duration=\"chatScenario.MaxDuration\"/>\r\n            </transition>\r\n        </state>\r\n        <!-- State Alice_Login -->\r\n        <state name=\"Alice_Login\" description=\"Alice logins\">\r\n            <onEntry action=\"alice.Open()\"/>\r\n            <transition event=\"LoggedIn\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_UnSubscribe\"/>\r\n        </state>\r\n        <!-- State Alice_UnSubscribe -->\r\n        <state name=\"Alice_UnSubscribe\" description=\"Alice unsubscribes bob\">\r\n            <onEntry action=\"alice.UnSubscribe(bob.Jid)\">\r\n                <timerStart timer=\"TimerIdleDuration\" duration=\"chatScenario.IdleDuration\"/>\r\n            </onEntry>\r\n            <transition event=\"EvTimerIdleDuration\" nextState=\"Alice_Closing\"/>\r\n        </state>\r\n        <!-- State Alice_Closing -->\r\n        <state name=\"Alice_Closing\" description=\"Alice is closing\">\r\n            <onEntry action=\"alice.Close()\"/>\r\n            <transition event=\"Closed\" condition=\"jid.User == alice.Jid.User\" nextState=\"Alice_End\"/>\r\n        </state>\r\n        <!-- State Alice_End -->\r\n        <state name=\"Alice_End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Trader.fsmcs": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.FixMachine\">\r\n        <object instance=\"trader\" class=\"Trader\"/>\r\n        <using>QuickFix</using>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"FixMachine\">\r\n            <event id=\"EvCreate\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvLogon\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvLogout\">\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvToAdmin\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvToApp\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvFromAdmin\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n            <event id=\"EvFromApp\">\r\n                <parameter name=\"message\" type=\"Message\"/>\r\n                <parameter name=\"sessionID\" type=\"SessionID\"/>\r\n            </event>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Trader\">\r\n        <state name=\"Init\">\r\n        </state>\r\n        <state name=\"LoggedIn\">\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "TrafficLight.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n    <!-- general settings -->\r\n    <settings asynchronous=\"true\" namespace=\"StateForge.Examples.TrafficLight\">\r\n        <object instance=\"light\" class=\"Light\"/>\r\n        <context class=\"TrafficLightContext\"/>\r\n    </settings>\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"TrafficLight\" feeder=\"TrafficLight\">\r\n            <event id=\"Start\">\r\n                <parameter name=\"message\" type=\"String\"/>\r\n            </event>\r\n            <event id=\"Stop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"TimerEvents\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"MaxDuration\"/>\r\n            <timer id=\"EvTimerRed\" name=\"TimerRed\"/>\r\n            <timer id=\"EvTimerYellow\" name=\"TimerYellow\"/>\r\n            <timer id=\"EvTimerGreen\" name=\"TimerGreen\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"TrafficLight\">\r\n        <onEntry>\r\n            <timerStart timer=\"MaxDuration\" duration=\"light.TimerMaxDuration\"/>\r\n        </onEntry>\r\n        <transition event=\"EvTimerMaxDuration\" nextState=\"End\"/>\r\n        <state name=\"Red\">\r\n            <onEntry>\r\n                <action>light.TurnOnRed()</action>\r\n                <timerStart timer=\"TimerRed\" duration=\"light.TimerRedDuration\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <action>light.TurnOffRed()</action>\r\n                <timerStop timer=\"TimerRed\"/>\r\n            </onExit>\r\n            <transition event=\"EvTimerRed\" nextState=\"Green\"/>\r\n        </state>\r\n        <state name=\"Yellow\">\r\n            <onEntry action=\"light.TurnOnYellow()\">\r\n                <timerStart timer=\"TimerYellow\" duration=\"light.TimerYellowDuration\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.TurnOffYellow()\"/>\r\n            <transition event=\"EvTimerYellow\" nextState=\"Red\"/>\r\n        </state>\r\n        <state name=\"Green\">\r\n            <onEntry action=\"light.TurnOnGreen()\">\r\n                <timerStart timer=\"TimerGreen\" duration=\"light.TimerGreenDuration\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.TurnOffGreen()\"/>\r\n            <transition event=\"EvTimerGreen\" nextState=\"Yellow\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Turnstile.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n\r\n  <!-- general settings -->\r\n  <settings asynchronous=\"false\" namespace=\"StateForge.Examples.Turnstile\">\r\n    <object instance=\"barrier\" class=\"Barrier\"/>\r\n    <object instance=\"alarm\" class=\"Alarm\"/>\r\n    <object instance=\"coinMachine\" class=\"CoinMachine\"/>\r\n    <context class=\"TurnstileContext\"/>\r\n  </settings>\r\n    \r\n  <!-- events -->\r\n  <events>\r\n    <eventSource name=\"Turnstile\" feeder=\"Turnstile\">\r\n      <event id=\"Coin\"/>\r\n      <event id=\"Pass\"/>\r\n    </eventSource>\r\n  </events>\r\n \r\n  <!-- States -->\r\n  <state name=\"Turnstile\">\r\n    <state name=\"Locked\">\r\n      <onEntry action=\"barrier.DoLock()\"/>\r\n      <transition event=\"Coin\" action=\"coinMachine.DoAccept()\" nextState=\"Unlocked\"/>\r\n      <transition event=\"Pass\" action=\"alarm.DoAlertStaff()\"/>\r\n    </state>\r\n    <state name=\"Unlocked\">\r\n      <onEntry action=\"barrier.DoUnlock()\"/>\r\n      <transition event=\"Coin\">\r\n        <action>coinMachine.DoReject()</action>\r\n        <action>alarm.DoRing()</action>\r\n      </transition>\r\n      <transition event=\"Pass\" nextState=\"Locked\"/>\r\n    </state>\r\n  </state>\r\n</sm:StateMachine>\r\n",
    "WashingMachine.fsmcs": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineDotNet-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineDotNet-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"false\" namespace=\"StateForge.Examples.WashingMachine\">\r\n        <description>An example of a washing machine featuring the history state.</description>\r\n        <object instance=\"washingMachine\" class=\"WashingMachine\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"WashingMachine\" feeder=\"WashingMachine\">\r\n            <event id=\"Start\"/>\r\n            <event id=\"Stop\"/>\r\n            <event id=\"Fault\"/>\r\n            <event id=\"DiagnoseSuccess\"/>\r\n            <event id=\"WashingDone\"/>\r\n            <event id=\"RinsingDone\"/>\r\n            <event id=\"SpinningDone\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <state name=\"WashingMachine\">\r\n        <transition event=\"Stop\" nextState=\"End\"/>\r\n        <state name=\"Idle\">\r\n            <transition event=\"Start\" nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n            <transition event=\"Fault\" nextState=\"OutOfService\"/>\r\n            <state name=\"Washing\">\r\n                <transition event=\"WashingDone\" nextState=\"Rinsing\"/>\r\n            </state>\r\n            <state name=\"Rinsing\">\r\n                <transition event=\"RinsingDone\" nextState=\"Spinning\"/>\r\n            </state>\r\n            <state name=\"Spinning\">\r\n                <transition event=\"SpinningDone\" nextState=\"End\"/>\r\n            </state>\r\n            <state name=\"History\" kind=\"history\"/>\r\n        </state>\r\n        <state name=\"OutOfService\">\r\n            <transition event=\"DiagnoseSuccess\" nextState=\"History\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Concurrent.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\">\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" namespace=\"com.stateforge.statemachine.examples.Concurrent\" >\r\n        <description>An example of a concurrent state machine</description>\r\n        <object instance=\"chatScenario\" class=\"ChatScenario\"/>\r\n        <object instance=\"alice\" class=\"Client\"/>\r\n        <object instance=\"bob\" class=\"Client\"/>\r\n    </settings>\r\n\r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Timer\">\r\n            <timer id=\"EvTimerMaxDuration\" name=\"TimerMaxDuration\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Root\">\r\n        <!-- State Idle -->\r\n        <state name=\"Idle\">\r\n        </state>\r\n        \r\n        <!-- State Login -->\r\n        <state name=\"Login\">\r\n            <parallel nextState=\"Closing\">\r\n                <!-- Machine Alice -->\r\n                <state name=\"AliceLogin\">\r\n                    <!-- State Alice_Login -->\r\n                    <state name=\"Alice_Login\" description=\"Alice logins\">\r\n                    </state>\r\n                    <!-- State Alice_WaitPresence -->\r\n                    <state name=\"Alice_WaitPresence\" description=\"Alice wait for presence\">\r\n                    </state>                    \r\n                    <!-- State Alice_Login_End -->\r\n                    <state name=\"Alice_Login_End\" kind=\"final\"/>\r\n                </state>\r\n\r\n                <!-- Machine Bob -->\r\n                <state name=\"BobLogin\">\r\n                    <!-- State Bob_Login -->\r\n                    <state name=\"Bob_Login\" description=\"Bob logins\">\r\n                    </state>\r\n                    <!-- State Bob_WaitPresence -->\r\n                    <state name=\"Bob_WaitPresence\" description=\"Alice wait for presence\">\r\n                    </state>\r\n                    <!-- State Bob_Login_End -->\r\n                    <state name=\"Bob_Login_End\" kind=\"final\"/>\r\n                </state>\r\n            </parallel>\r\n        </state>\r\n\r\n        <state name=\"Closing\" description=\"Everyone is closing\">\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "FeedFetcher.fsmjava": "<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1                                      http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\">\n    <!-- General settings -->\n    <settings asynchronous=\"true\" namespace=\"com.coinfeed.marketfeed.fetcher.statemachine\">\n        <object instance=\"feed\" class=\"FeedFetcher\" namespace=\"com.coinfeed.marketfeed.fetcher\"/>\n    </settings>\n    <!-- events -->\n    <events>\n        <eventSource name=\"External\">\n            <event id=\"evStart\"/>\n            <event id=\"evStop\"/>\n        </eventSource>\n        <eventSource name=\"Internal\">\n            <event id=\"evError\"/>\n            <event id=\"evFetched\"/>\n        </eventSource>\n        <eventSource name=\"Timers\">\n            <timer id=\"evTimerRetry\" name=\"TimerRetry\"/>\n        </eventSource>\n    </events>\n    <!-- States -->\n    <state name=\"FeedFetcher\">\n        <state name=\"Idle\">\n            <transition event=\"evStart\" nextState=\"Operating\"/>\n        </state>\n        <state name=\"Operating\">\n            <onExit>\n                <action>feed.stop()</action>\n            </onExit>\n            <transition event=\"evStop\" nextState=\"End\"/>\n            <state name=\"Fetching\">\n                <onEntry>\n                    <action>feed.fetch()</action>\n                </onEntry>\n                <transition event=\"evFetched\" nextState=\"Waiting\"/>\n                <transition event=\"evError\" nextState=\"Waiting\"/>\n            </state>\n            <state name=\"Waiting\">\n                <onEntry>\n                    <timerStart timer=\"TimerRetry\" duration=\"feed.getConfig().getPollingPeriod()\"/>\n                </onEntry>\n                <transition event=\"evTimerRetry\" nextState=\"Fetching\"/>\n            </state>\n        </state>\n        <state name=\"End\" kind=\"final\"/>\n    </state>\n</sm:StateMachine>\n",
    "HelloWorld.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"false\" namespace=\"com.stateforge.statemachine.examples.HelloWorld\">\r\n        <object instance=\"action\" class=\"HelloWorldAction\"/>\r\n    </settings>\r\n    \r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"HelloWorldEvent\">\r\n            <event id=\"start\"/>\r\n            <event id=\"stop\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"HelloWorld\">\r\n        <state name=\"Idle\">\r\n            <transition event=\"start\" nextState=\"Running\"/>\r\n        </state>\r\n        <state name=\"Running\">\r\n            <onEntry action=\"action.doPrint(&quot;HELLO&quot;)\"/>\r\n            <onExit action=\"action.doPrint(&quot;BYE&quot;)\"/>\r\n            <transition event=\"stop\" nextState=\"End\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Hierarchical.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\">\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" namespace=\"com.stateforge.statemachine.examples.PelicanCrossing\" >\r\n        <description>An example of a hierarchical state machine</description>\r\n        <object instance=\"vehical\" class=\"Vehical\"/>\r\n        <object instance=\"pedestrian\" class=\"Pedestrian\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"Management\">\r\n            <event id=\"start\"/>\r\n            <event id=\"stop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Timers\">\r\n            <timer name=\"PedestrianTimer\" id=\"evPedestrianTimer\"/>\r\n            <timer name=\"VehicalTimer\" id=\"evVehicleTimer\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Root\">\r\n        <state name=\"Init\">\r\n        </state>\r\n        <state name=\"Operational\">\r\n            <state name=\"Vehicle\">\r\n                <state name=\"Green\">\r\n                </state>\r\n                <state name=\"Yellow\">\r\n                </state>\r\n            </state>\r\n            <state name=\"Pedestrian\">\r\n                <state name=\"Walk\">\r\n                </state>\r\n                <state name=\"Flash\">\r\n                    <state name=\"FlashOff\">\r\n                    </state>\r\n                    <state name=\"FlashOn\">\r\n                    </state>\r\n                </state>\r\n            </state>\r\n        </state>\r\n        <state name=\"Off\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n\r\n",
    "Led.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"false\" namespace=\"com.stateforge.statemachine.examples.Led\">\r\n        <object instance=\"led\" class=\"Led\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"SwitchEvent\">\r\n            <event id=\"on\"/>\r\n            <event id=\"off\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Led\">\r\n        <state name=\"SwitchedOff\">\r\n            <onEntry action=\"led.doOff()\"/>\r\n            <transition event=\"on\" nextState=\"SwitchedOn\"/>\r\n        </state>\r\n        <state name=\"SwitchedOn\">\r\n            <onEntry action=\"led.doOn()\"/>\r\n            <transition event=\"off\" nextState=\"SwitchedOff\"/>\r\n        </state>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Microwave.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"false\" namespace=\"com.stateforge.statemachine.examples.microwave\">\r\n        <object instance=\"action\" class=\"MicrowaveAction\"/>\r\n    </settings>\r\n  <!-- Events -->\r\n  <events>\r\n    <eventSource name=\"Microwave\">\r\n      <event id=\"evStart\"/>\r\n      <event id=\"evStop\"/>\r\n      <event id=\"evTurnOn\"/>\r\n      <event id=\"evTurnOff\"/>\r\n    </eventSource>\r\n    <eventSource name=\"CookingAnalyzer\">\r\n      <event id=\"evCookingDone\"/>\r\n    </eventSource>\r\n    <eventSource name=\"Door\">\r\n      <event id=\"evDoorOpened\"/>\r\n      <event id=\"evDoorClosed\"/>\r\n    </eventSource>\r\n  </events>\r\n\r\n  <!-- States -->\r\n  <state name=\"Microwave\">\r\n    <transition event=\"evStop\" nextState=\"End\"/>\r\n    <state name=\"Initial\">\r\n      <transition event=\"evStart\" nextState=\"Operating\"/>\r\n    </state>\r\n    <state name=\"Operating\">\r\n      <parallel nextState=\"End\">\r\n        <!-- First region is the engine -->\r\n        <state name=\"Engine\">\r\n          <state name=\"Off\">\r\n            <transition event=\"evTurnOn\"\r\n                        condition=\"context.getContextParent().getMicrowaveOperatingParallel().getMicrowaveDoorContext().getStateCurrent() == MicrowaveDoorOpenState.getInstance()\"\r\n                        nextState=\"Idle\"/>\r\n            <transition event=\"evTurnOn\" nextState=\"Cooking\"/>\r\n          </state>\r\n          <state name=\"On\">\r\n            <transition event=\"evTurnOff\" nextState=\"Off\"/>\r\n            <transition event=\"evCookingDone\" nextState=\"Off\"/>\r\n            <state name=\"Idle\">\r\n              <transition event=\"evDoorClosed\" nextState=\"Cooking\"/>\r\n            </state>\r\n            <state name=\"Cooking\">\r\n              <transition event=\"evDoorOpened\" nextState=\"Idle\"/>\r\n            </state>\r\n          </state>\r\n        </state>\r\n        <!-- Second region is the door -->\r\n        <state name=\"Door\">\r\n          <state name=\"DoorClose\">\r\n            <transition event=\"evDoorOpened\" nextState=\"DoorOpen\"/>\r\n          </state>\r\n          <state name=\"DoorOpen\">\r\n            <transition event=\"evDoorClosed\" nextState=\"DoorClose\"/>\r\n          </state>\r\n        </state>\r\n      </parallel>\r\n    </state>\r\n    <state name=\"End\" kind=\"final\"/>\r\n  </state>\r\n</sm:StateMachine>\r\n",
    "PelicanCrossing.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" namespace=\"com.stateforge.statemachine.examples.PelicanCrossing\" >\r\n        <description>Pelican crossing: a good example of a hierarchical state machine</description>\r\n        <object instance=\"vehical\" class=\"Vehical\"/>\r\n        <object instance=\"pedestrian\" class=\"Pedestrian\"/>\r\n    </settings>\r\n\r\n    <!-- Events -->\r\n    <events>\r\n        <eventSource name=\"Management\">\r\n            <event id=\"start\"/>\r\n            <event id=\"stop\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Timers\">\r\n            <timer name=\"PedestrianTimer\" id=\"evPedestrianTimer\"/>\r\n            <timer name=\"VehicalTimer\" id=\"evVehicleTimer\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"PelicanCrossing\">\r\n        <state name=\"Init\">\r\n            <transition event=\"start\" nextState=\"Operational\"/>\r\n        </state>\r\n        <state name=\"Operational\">\r\n            <transition event=\"stop\" nextState=\"Off\"/>\r\n            <state name=\"Vehicle\">\r\n                <onEntry >\r\n                    <action>pedestrian.redOn()</action>\r\n                    <action>vehical.redOff()</action>\r\n                </onEntry>\r\n                <state name=\"Green\">\r\n                    <onEntry>\r\n                        <action>vehical.greenOn()</action>\r\n                        <timerStart timer=\"VehicalTimer\" duration=\"vehical.getDurationGreen()\"/>\r\n                    </onEntry>\r\n                    <onExit action=\"vehical.greenOff()\"/>\r\n                    <transition event=\"evVehicalTimer\" nextState=\"Yellow\"/>\r\n                </state>\r\n                <state name=\"Yellow\">\r\n                    <onEntry>\r\n                        <action>vehical.yellowOn()</action>\r\n                        <timerStart timer=\"VehicalTimer\" duration=\"vehical.getDurationYellow()\"/>\r\n                    </onEntry>\r\n                    <onExit action=\"vehical.yellowOff()\"/>\r\n                    <transition event=\"evVehicalTimer\" nextState=\"Pedestrian\"/>\r\n                </state>\r\n            </state>\r\n            <state name=\"Pedestrian\">\r\n                <onEntry>\r\n                    <action>vehical.redOn()</action>\r\n                    <action>pedestrian.redOff()</action>\r\n                </onEntry>\r\n                <state name=\"Walk\">\r\n                    <onEntry>\r\n                        <action>pedestrian.greenOn()</action>\r\n                        <timerStart timer=\"PedestrianTimer\" duration=\"pedestrian.getDurationWalk()\"/>\r\n                    </onEntry>\r\n                    <onExit action=\"pedestrian.greenOff()\"/>\r\n                    <transition event=\"evPedestrianTimer\" nextState=\"Flash\"/>\r\n                </state>\r\n                <state name=\"Flash\">\r\n                    <onEntry action=\"pedestrian.flashCountReset()\"/>\r\n                    <state name=\"FlashOff\">\r\n                        <onEntry>\r\n                            <action>pedestrian.flashCountDecrease()</action>\r\n                            <timerStart timer=\"PedestrianTimer\" duration=\"pedestrian.getDurationFlashOff()\"/>\r\n                        </onEntry>\r\n                        <transition event=\"evPedestrianTimer\" nextState=\"FlashOn\"/>\r\n                    </state>\r\n                    <state name=\"FlashOn\">\r\n                        <onEntry>\r\n                            <action>pedestrian.greenOn()</action>\r\n                            <timerStart timer=\"PedestrianTimer\" duration=\"pedestrian.getDurationFlashOn()\"/>\r\n                        </onEntry>\r\n                        <onExit action=\"pedestrian.greenOff()\"/>\r\n                        <transition event=\"evPedestrianTimer\" condition=\"pedestrian.flashCountReached() == true\" nextState=\"Vehicle\"/>\r\n                        <transition event=\"evPedestrianTimer\" nextState=\"FlashOff\"/>\r\n                    </state>\r\n                </state>\r\n            </state>\r\n        </state>\r\n        <state name=\"Off\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "Ping.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" namespace=\"com.stateforge.statemachine.examples.ping\">\r\n        <object instance=\"ping\" class=\"Ping\"/>\r\n    </settings>\r\n    \r\n    <!-- events -->\r\n    <events>\r\n        <eventSource name=\"Ping\">\r\n            <event id=\"evStart\"/>\r\n            <event id=\"evCancel\"/>\r\n        </eventSource>\r\n        <eventSource name=\"Internal\">\r\n            <event id=\"evError\"/>\r\n            <event id=\"evPingReply\"/>\r\n            <timer id=\"evTimer\" name=\"Timer\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"Ping\">\r\n        <state name=\"Idle\">\r\n            <transition event=\"evStart\" nextState=\"SendPingAndWaitForReply\"/>\r\n        </state>\r\n        <state name=\"SendPingAndWaitForReply\">\r\n            <onEntry>\r\n                <action>ping.send()</action>\r\n                <timerStart timer=\"Timer\" duration=\"ping.getTimeout()\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <timerStop timer=\"Timer\"/>\r\n            </onExit>\r\n            <transition event=\"evCancel\" nextState=\"End\"/>\r\n            <transition event=\"evPingReply\" condition=\"ping.getTx() == ping.getCount()\" nextState=\"End\"/>\r\n            <transition event=\"evTimer\" condition=\"ping.getTx() == ping.getCount()\" nextState=\"End\"/>\r\n            <transition event=\"evTimer\" nextState=\"SendPingAndWaitForReply\" />\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n",
    "RippleWsClient.fsmjava": "<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1                                      http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\">\n    <!-- General settings -->\n    <settings asynchronous=\"true\" namespace=\"org.opencoin.client\">\n        <object instance=\"client\" class=\"RippleWsClient\" namespace=\"org.opencoin.client\"/>\n    </settings>\n    <!-- events -->\n    <events>\n        <eventSource name=\"Client\">\n            <event id=\"evConnect\"/>\n            <event id=\"evDisconnect\"/>\n        </eventSource>\n        <eventSource name=\"Internal\">\n            <event id=\"evCommand\"/>\n        </eventSource>\n        <eventSource name=\"Server\">\n            <event id=\"evError\"/>\n            <event id=\"evConnected\"/>\n        </eventSource>\n        <eventSource name=\"Timers\">\n            <timer id=\"evTimerRetry\" name=\"TimerRetry\"/>\n        </eventSource>\n    </events>\n    <!-- States -->\n    <state name=\"RippleWsClient\">\n        <transition event=\"evDisconnect\" nextState=\"Disconnected\">\n            <action>client.doDisconnect()</action>\n            <action>client.onDisconnected()</action>\n        </transition>\n        <transition event=\"evError\" nextState=\"Disconnected\">\n        </transition>\n        <state name=\"Disconnected\">\n            <transition event=\"evConnect\" nextState=\"Connecting\">\n                <action>client.doConnect()</action>\n            </transition>\n            <transition event=\"evCommand\" nextState=\"Connecting\">\n                <action>client.doConnect();</action>\n            </transition>\n        </state>\n        <state name=\"Connecting\">\n            <transition event=\"evConnected\" nextState=\"Connected\">\n                <action>client.doSendCommand()</action>\n            </transition>\n        </state>\n        <state name=\"Connected\">\n            <onEntry>\n                <action>client.onConnected()</action>\n                <action/>\n            </onEntry>\n            <transition event=\"evConnect\" nextState=\"Connected\">\n                <action/>\n            </transition>\n        </state>\n    </state>\n</sm:StateMachine>\n",
    "TrafficLight.fsmjava": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<sm:StateMachine xmlns:sm=\"http://www.stateforge.com/StateMachineJava-v1\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                 xsi:schemaLocation=\"http://www.stateforge.com/StateMachineJava-v1\r\n                                     http://www.stateforge.com/xsd/StateMachineJava-v1.xsd\" >\r\n    <!-- General settings -->\r\n    <settings asynchronous=\"true\" namespace=\"com.stateforge.statemachine.examples.trafficlight\">\r\n        <object instance=\"light\" class=\"Light\"/>\r\n    </settings>\r\n    \r\n    <!-- Events -->\r\n    <events>\r\n       <eventSource name=\"ManagementEvents\">\r\n            <event id=\"evStop\"/>\r\n        </eventSource>    \r\n       <eventSource name=\"TimerEvents\">\r\n            <timer id=\"evTimerMaxDuration\" name=\"MaxDuration\"/>\r\n            <timer id=\"evTimerLight\" name=\"TimerLight\"/>\r\n        </eventSource>\r\n    </events>\r\n\r\n    <!-- States -->\r\n    <state name=\"TrafficLight\">\r\n        <onEntry>\r\n            <timerStart timer=\"MaxDuration\" duration=\"light.getMaxDuration()\"/>\r\n        </onEntry>\r\n        <transition event=\"evStop\" nextState=\"End\"/>\r\n        <transition event=\"evTimerMaxDuration\" nextState=\"End\"/>\r\n        <state name=\"Red\">\r\n            <onEntry>\r\n                <action>light.turnOnRed()</action>\r\n                <timerStart timer=\"TimerLight\" duration=\"light.getRedDuration()\"/>\r\n            </onEntry>\r\n            <onExit>\r\n                <action>light.turnOffRed()</action>\r\n                <timerStop timer=\"TimerLight\"/>\r\n            </onExit>\r\n            <transition event=\"evTimerLight\" nextState=\"Green\"/>\r\n        </state>\r\n        <state name=\"Yellow\">\r\n            <onEntry action=\"light.turnOnYellow()\">\r\n                <timerStart timer=\"TimerLight\" duration=\"light.getYellowDuration()\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.turnOffYellow()\"/>\r\n            <transition event=\"evTimerLight\" nextState=\"Red\"/>\r\n        </state>\r\n        <state name=\"Green\">\r\n            <onEntry action=\"light.turnOnGreen()\">\r\n                <timerStart timer=\"TimerLight\" duration=\"light.getGreenDuration()\"/>\r\n            </onEntry>\r\n            <onExit  action=\"light.turnOffGreen()\"/>\r\n            <transition event=\"evTimerLight\" nextState=\"Yellow\"/>\r\n        </state>\r\n        <state name=\"End\" kind=\"final\"/>\r\n    </state>\r\n</sm:StateMachine>\r\n"
}