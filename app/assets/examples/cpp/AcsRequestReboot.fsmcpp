<?xml version="1.0" encoding="UTF-8"?>
<sm:StateMachine xmlns:sm="http://www.stateforge.com/StateMachineCpp-v1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://www.stateforge.com/StateMachineCpp-v1
                                     http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd" >
    <!-- general settings -->
    <settings asynchronous="true" library="qt">
        <object instance="request" class="AcsRequestRebootPrivate" include="AcsRequestRebootPrivate.h"/>
        <include>AcsConnection.h</include>
    </settings>

    <!-- events -->
    <events>
        <!-- Management Events -->
        <eventSource name="ManagementEvent">
            <event id="evStart">
                <parameter type="AcsConnection" name="connection" passedBy="reference"/>
            </event>
            <event id="evClose"/>
        </eventSource>
        <!-- Sockets Events -->
        <eventSource name="SocketEvent">
            <event id="evSocketError"/>
        </eventSource>
        <!-- Acs client Events -->
        <eventSource name="AcsClientEvent">
            <event id="evInformRequest"/>
            <event id="evRebootResponse"/>
            <event id="evHttpPost"/>
            <event id="evSent"/>
            <event id="evUnknownRequest"/>
        </eventSource>
    </events>

    <state name="AcsRequestReboot">
        <transition event="evSocketError" nextState="End"/>
        <!-- State Initial -->
        <state name="Initial">
            <transition event="evStart" nextState="SendRequestAndWaitResponse">
                <action>connection.sendRequestReboot();</action>
            </transition>
        </state>
        <state name="SendRequestAndWaitResponse">
            <transition event="evRebootResponse" nextState="WaitConnectionClose">
                <action>request.client().sendHttpResponse();</action>
            </transition>
        </state>
        <state name="WaitConnectionClose">
            <transition event="evSocketError" nextState="WaitInformRequest"/>
        </state>
        <state name="WaitInformRequest">
            <transition event="evInformRequest" nextState="WaitPost">
                <action>request.client().sendInformResponse();</action>
            </transition>
        </state>
        <state name="WaitPost">
            <transition event="evHttpPost" nextState="End"/>
        </state>
        <state name="End" kind="final"/>
    </state>
</sm:StateMachine>

