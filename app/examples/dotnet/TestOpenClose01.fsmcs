<?xml version="1.0" encoding="UTF-8"?>
<sm:StateMachine xmlns:sm="http://www.stateforge.com/StateMachineDotNet-v1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://www.stateforge.com/StateMachineDotNet-v1
                                     http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd" >

    <!-- general settings -->
    <settings asynchronous="true" namespace="StateForge.Examples.XmppChat">
        <object instance="chatScenario" class="ChatScenario"/>
        <object instance="alice" class="Client"/>
        <object instance="bob" class="Client"/>
    </settings>

    <!-- events -->
    <events>
        <eventSource name="IChatScenario" file="IChatScenario.cs"/>
        <eventSource name="Timer">
            <timer id="EvTimerMaxDuration" name="TimerMaxDuration"/>
        </eventSource>
    </events>

    <!-- States -->
    <state name="XmppTestOpenClose01">
        <transition event="EvTimerMaxDuration" nextState="End">
            <action>chatScenario.Error = "Maximum duration expired"</action>
        </transition>
        <!-- State Idle -->
        <state name="Idle">
            <transition event="Start" nextState="Running">
                <timerStart timer="TimerMaxDuration" duration="chatScenario.MaxDuration"/>
            </transition>
        </state>

        <!-- State Running -->
        <state name="Running">
            <parallel nextState="End">
                <!-- Machine Alice -->
                <state name="Alice">
                    <!-- State Alice_Login -->
                    <state name="Alice_Login" description="Alice logins">
                        <onEntry action="alice.Open()"/>
                        <transition event="LoggedIn" condition="jid.User == alice.Jid.User" nextState="Alice_Closing"/>
                    </state>
                    <!-- State Alice_Closing -->
                    <state name="Alice_Closing" description="Alice is closing">
                        <onEntry action="alice.Close()"/>
                        <transition event="Closed" condition="jid.User == alice.Jid.User" nextState="Alice_End"/>
                    </state>
                    <!-- State Alice_End -->
                    <state name="Alice_End" kind="final"/>
                </state>

                <!-- Machine Bob -->
                <state name="Bob">
                    <!-- State Bob_Login -->
                    <state name="Bob_Login" description="Bob logins">
                        <onEntry action="bob.Open()"/>
                        <transition event="LoggedIn" condition="jid.User == bob.Jid.User" nextState="Bob_Closing"/>
                    </state>
                    <!-- State Bob_Closing -->
                    <state name="Bob_Closing" description="Bob is closing">
                        <onEntry action="bob.Close()"/>
                        <transition event="Closed" condition="jid.User == bob.Jid.User" nextState="Bob_End"/>
                    </state>
                    <!-- State Bob_End -->
                    <state name="Bob_End" kind="final"/>
                </state>
            </parallel>
        </state>
        <state name="End" kind="final"/>
    </state>
</sm:StateMachine>
